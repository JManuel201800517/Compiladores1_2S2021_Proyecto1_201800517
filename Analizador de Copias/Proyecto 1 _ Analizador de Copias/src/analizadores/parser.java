
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\006\000\002\003\005\000\002\004\006" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\005\000\002" +
    "\006\006\000\002\006\004\000\002\006\002\000\002\007" +
    "\007\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\012\000\002\011\003\000" +
    "\002\012\007\000\002\012\013\000\002\013\016\000\002" +
    "\014\012\000\002\014\013\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\005\000\002\016\010" +
    "\000\002\017\007\000\002\017\007\000\002\020\003\000" +
    "\002\020\003\000\002\021\007\000\002\021\006\000\002" +
    "\022\007\000\002\022\006\000\002\023\005\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\024\007" +
    "\000\002\024\007\000\002\024\007\000\002\025\004\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\003\000\002\026\012\000\002\027" +
    "\003\000\002\027\004\000\002\027\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\006\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\004\000\002\035\005\000\002\035\005\000\002\035\004" +
    "\000\002\036\006\000\002\036\006\000\002\036\005\000" +
    "\002\036\005\000\002\036\006\000\002\036\006\000\002" +
    "\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\010\033\007\034\004\046\005\001\002\000" +
    "\014\010\013\011\011\012\014\013\012\014\015\001\002" +
    "\000\010\011\011\013\012\014\015\001\002\000\004\002" +
    "\023\001\002\000\014\010\013\011\011\012\014\013\012" +
    "\014\015\001\002\000\060\010\013\011\011\012\014\013" +
    "\012\014\015\027\uffc5\033\uffc5\034\uffc5\035\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\001\002\000\120\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026" +
    "\uffc3\027\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\001\002\000\120\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\114\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\027\uffc1\030\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\001\002\000\114\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\027\uffc0\030\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002\000\120\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\001" +
    "\002\000\060\010\013\011\011\012\014\013\012\014\015" +
    "\027\uffc6\033\uffc6\034\uffc6\035\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\010\033\007\034\004\046\005\001\002\000\004\002\uffff" +
    "\001\002\000\054\011\uffc8\013\uffc8\014\uffc8\027\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000\054\011\uffc7" +
    "\013\uffc7\014\uffc7\027\uffc7\033\uffc7\034\uffc7\035\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\001\002\000\004\002\001\001\002\000\004\026\026" +
    "\001\002\000\004\002\000\001\002\000\044\011\011\013" +
    "\012\014\015\027\ufff3\033\045\034\055\041\056\042\052" +
    "\043\051\044\036\045\030\047\054\050\032\051\042\052" +
    "\034\053\050\056\035\001\002\000\004\016\351\001\002" +
    "\000\006\026\335\044\336\001\002\000\010\027\ufffa\054" +
    "\ufffa\055\ufffa\001\002\000\004\016\326\001\002\000\010" +
    "\027\uffef\054\uffef\055\uffef\001\002\000\004\016\305\001" +
    "\002\000\004\016\301\001\002\000\004\016\272\001\002" +
    "\000\010\027\ufffb\054\ufffb\055\ufffb\001\002\000\010\027" +
    "\ufff7\054\ufff7\055\ufff7\001\002\000\004\016\251\001\002" +
    "\000\004\026\241\001\002\000\010\027\uffec\054\uffec\055" +
    "\uffec\001\002\000\004\027\240\001\002\000\014\010\013" +
    "\011\011\012\014\013\012\014\015\001\002\000\010\027" +
    "\ufff8\054\ufff8\055\ufff8\001\002\000\010\027\ufff9\054\ufff9" +
    "\055\ufff9\001\002\000\004\024\235\001\002\000\010\011" +
    "\011\013\012\014\015\001\002\000\010\011\011\013\012" +
    "\014\015\001\002\000\010\027\ufff0\054\ufff0\055\ufff0\001" +
    "\002\000\004\016\173\001\002\000\014\010\013\011\011" +
    "\012\014\013\012\014\015\001\002\000\010\011\011\013" +
    "\012\014\015\001\002\000\010\027\ufff1\054\ufff1\055\ufff1" +
    "\001\002\000\010\027\uffee\054\uffee\055\uffee\001\002\000" +
    "\004\022\062\001\002\000\026\005\063\010\013\011\011" +
    "\012\014\013\012\014\015\015\074\016\075\023\067\057" +
    "\077\001\002\000\022\005\063\010\013\011\011\012\014" +
    "\013\012\014\015\016\075\023\067\001\002\000\100\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffcf\013\uffcf\014\uffcf" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffcf\027\uffcf\033" +
    "\uffcf\034\uffcf\036\uffbc\037\uffbc\040\uffbc\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\030" +
    "\004\130\005\124\006\126\007\127\020\125\021\133\022" +
    "\134\023\135\036\123\037\136\040\131\001\002\000\100" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffcd\013\uffcd\014" +
    "\uffcd\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffcd\027\uffcd" +
    "\033\uffcd\034\uffcd\036\uffbf\037\uffbf\040\uffbf\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000" +
    "\022\005\063\010\013\011\011\012\014\013\012\014\015" +
    "\016\075\023\067\001\002\000\102\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\011\uffbd\013\uffbd\014\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\027\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\102\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\011\uffa7\013\uffa7\014\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\027\uffa7" +
    "\033\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002\000" +
    "\100\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffd0\013\uffd0" +
    "\014\uffd0\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffd0\027" +
    "\uffd0\033\uffd0\034\uffd0\036\uffbb\037\uffbb\040\uffbb\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002" +
    "\000\102\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\027\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\001\002\000\010\011\011\013\012\014\015\001\002" +
    "\000\022\005\063\010\013\011\011\012\014\013\012\014" +
    "\015\016\075\023\067\001\002\000\052\011\011\013\012" +
    "\014\015\024\113\027\ufff3\033\045\034\055\041\056\042" +
    "\052\043\051\044\036\045\030\047\054\050\032\051\042" +
    "\052\034\053\050\054\ufff3\055\ufff3\056\035\001\002\000" +
    "\004\016\100\001\002\000\004\015\101\001\002\000\004" +
    "\031\102\001\002\000\004\031\103\001\002\000\012\007" +
    "\105\011\011\013\012\014\015\001\002\000\004\015\111" +
    "\001\002\000\012\007\105\011\011\013\012\014\015\001" +
    "\002\000\014\007\105\011\011\013\012\014\015\015\uffcb" +
    "\001\002\000\004\015\uffca\001\002\000\004\015\uffc9\001" +
    "\002\000\004\017\112\001\002\000\052\011\uffcc\013\uffcc" +
    "\014\uffcc\024\uffcc\027\uffcc\033\uffcc\034\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000" +
    "\050\011\011\013\012\014\015\027\ufff3\033\045\034\055" +
    "\041\056\042\052\043\051\044\036\045\030\047\054\050" +
    "\032\051\042\052\034\053\050\054\ufff3\055\ufff3\056\035" +
    "\001\002\000\010\027\uffd1\054\uffd1\055\uffd1\001\002\000" +
    "\010\027\uffd5\054\uffd5\055\uffd5\001\002\000\010\027\uffd2" +
    "\054\uffd2\055\uffd2\001\002\000\032\004\130\005\124\006" +
    "\126\007\127\017\132\020\125\021\133\022\134\023\135" +
    "\036\123\037\136\040\131\001\002\000\102\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\027\uffbb\033" +
    "\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\001\002\000\102" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\013\uffbc\014" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\027\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\001" +
    "\002\000\102\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf" +
    "\013\uffbf\014\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\027\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\001\002\000\022\005\063\010\013\011\011\012" +
    "\014\013\012\014\015\016\075\023\067\001\002\000\022" +
    "\005\161\010\013\011\011\012\014\013\012\014\015\016" +
    "\075\023\067\001\002\000\024\005\063\010\013\011\011" +
    "\012\014\013\012\014\015\016\075\022\157\023\067\001" +
    "\002\000\024\005\063\006\154\010\013\011\011\012\014" +
    "\013\012\014\015\016\075\023\067\001\002\000\022\005" +
    "\063\010\013\011\011\012\014\013\012\014\015\016\075" +
    "\023\067\001\002\000\024\004\151\005\063\010\013\011" +
    "\011\012\014\013\012\014\015\016\075\023\067\001\002" +
    "\000\022\005\063\010\013\011\011\012\014\013\012\014" +
    "\015\016\075\023\067\001\002\000\102\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\011\uffba\013\uffba\014\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\027\uffba\033\uffba" +
    "\034\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\001\002\000\024\005" +
    "\063\010\013\011\011\012\014\013\012\014\015\016\075" +
    "\022\145\023\067\001\002\000\004\022\142\001\002\000" +
    "\004\022\140\001\002\000\022\005\063\010\013\011\011" +
    "\012\014\013\012\014\015\016\075\023\067\001\002\000" +
    "\102\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf" +
    "\014\uffaf\017\uffaf\020\125\021\133\022\134\023\135\024" +
    "\uffaf\027\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\001\002\000\022\005\063\010\013\011\011\012\014\013" +
    "\012\014\015\016\075\023\067\001\002\000\102\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\011\uffac\013\uffac\014\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\027\uffac" +
    "\033\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\047\uffac\050\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\001\002\000" +
    "\022\005\063\010\013\011\011\012\014\013\012\014\015" +
    "\016\075\023\067\001\002\000\102\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\011\uffad\013\uffad\014\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\027\uffad\033\uffad\034" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\001\002\000\102\004\uffaa" +
    "\005\uffaa\006\uffaa\007\uffaa\011\uffaa\013\uffaa\014\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\027\uffaa" +
    "\033\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\001\002\000" +
    "\022\005\063\010\013\011\011\012\014\013\012\014\015" +
    "\016\075\023\067\001\002\000\102\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\011\uffa8\013\uffa8\014\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\027\uffa8\033\uffa8\034" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002\000\102\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\013\uffb4\014\uffb4\017" +
    "\uffb4\020\125\021\133\022\134\023\135\024\uffb4\027\uffb4" +
    "\033\uffb4\034\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\001\002\000" +
    "\102\004\uffb9\005\uffb9\006\126\007\127\011\uffb9\013\uffb9" +
    "\014\uffb9\017\uffb9\020\125\021\133\022\134\023\135\024" +
    "\uffb9\027\uffb9\033\uffb9\034\uffb9\036\123\037\136\040\131" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\001\002\000\102\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011" +
    "\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\027\uffb3\033\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\001\002\000\102\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\011\uffb6\013\uffb6\014\uffb6\017\uffb6\020\125\021" +
    "\133\022\134\023\135\024\uffb6\027\uffb6\033\uffb6\034\uffb6" +
    "\036\123\037\136\040\131\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\001\002\000\102\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7\014\uffb7\017\uffb7" +
    "\020\125\021\133\022\134\023\135\024\uffb7\027\uffb7\033" +
    "\uffb7\034\uffb7\036\123\037\136\040\131\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\022" +
    "\005\063\010\013\011\011\012\014\013\012\014\015\016" +
    "\075\023\067\001\002\000\102\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\011\uffb5\013\uffb5\014\uffb5\017\uffb5\020\125\021" +
    "\133\022\134\023\135\024\uffb5\027\uffb5\033\uffb5\034\uffb5" +
    "\036\123\037\136\040\131\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\001\002\000\102\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\011\uffab\013\uffab\014\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\027\uffab\033" +
    "\uffab\034\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\056\uffab\001\002\000\022" +
    "\005\063\010\013\011\011\012\014\013\012\014\015\016" +
    "\075\023\067\001\002\000\102\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\011\uffa9\013\uffa9\014\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\027\uffa9\033\uffa9\034\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\001\002\000\110\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\013\011\011\012\014\013\012" +
    "\014\015\016\075\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\067\024\uffb2\027\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\001\002\000\102\004\uffb8\005\uffb8\006\126\007" +
    "\127\011\uffb8\013\uffb8\014\uffb8\017\uffb8\020\125\021\133" +
    "\022\134\023\135\024\uffb8\027\uffb8\033\uffb8\034\uffb8\036" +
    "\123\037\136\040\131\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\001\002\000\102\004\uffb1\005\uffb1" +
    "\006\126\007\127\011\uffb1\013\uffb1\014\uffb1\017\uffb1\020" +
    "\125\021\133\022\134\023\135\024\uffb1\027\uffb1\033\uffb1" +
    "\034\uffb1\036\123\037\136\040\131\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002\000\102\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\013\uffb0\014\uffb0" +
    "\017\uffb0\020\125\021\133\022\134\023\135\024\uffb0\027" +
    "\uffb0\033\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002" +
    "\000\004\015\166\001\002\000\052\011\uffce\013\uffce\014" +
    "\uffce\024\uffce\027\uffce\033\uffce\034\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\055\uffce\056\uffce\001\002\000\102" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\013\uffae\014" +
    "\uffae\017\uffae\020\125\021\133\022\134\023\135\024\uffae" +
    "\027\uffae\033\uffae\034\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\001" +
    "\002\000\004\035\171\001\002\000\050\011\011\013\012" +
    "\014\015\027\ufff3\033\045\034\055\041\056\042\052\043" +
    "\051\044\036\045\030\047\054\050\032\051\042\052\034" +
    "\053\050\054\ufff3\055\ufff3\056\035\001\002\000\010\027" +
    "\ufff5\054\ufff5\055\ufff5\001\002\000\010\041\175\042\176" +
    "\043\174\001\002\000\010\011\011\013\012\014\015\001" +
    "\002\000\010\011\011\013\012\014\015\001\002\000\010" +
    "\011\011\013\012\014\015\001\002\000\004\024\203\001" +
    "\002\000\004\022\201\001\002\000\026\005\063\010\013" +
    "\011\011\012\014\013\012\014\015\015\074\016\075\023" +
    "\067\057\077\001\002\000\004\024\uffe3\001\002\000\022" +
    "\005\063\010\013\011\011\012\014\013\012\014\015\016" +
    "\075\023\067\001\002\000\032\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\205\036" +
    "\uffbd\037\uffbd\040\uffbd\001\002\000\022\005\063\010\013" +
    "\011\011\012\014\013\012\014\015\016\075\023\067\001" +
    "\002\000\032\004\uffbf\005\uffbf\006\uffbf\007\uffbf\017\207" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\036\uffbf\037\uffbf\040" +
    "\uffbf\001\002\000\004\026\210\001\002\000\044\011\011" +
    "\013\012\014\015\027\ufff3\033\045\034\055\041\056\042" +
    "\052\043\051\044\036\045\030\047\054\050\032\051\042" +
    "\052\034\053\050\056\035\001\002\000\004\027\212\001" +
    "\002\000\052\011\011\013\012\014\015\024\113\027\ufff3" +
    "\033\045\034\055\041\056\042\052\043\051\044\036\045" +
    "\030\047\054\050\032\051\042\052\034\053\050\054\ufff3" +
    "\055\ufff3\056\035\001\002\000\010\027\uffe9\054\uffe9\055" +
    "\uffe9\001\002\000\004\022\215\001\002\000\026\005\063" +
    "\010\013\011\011\012\014\013\012\014\015\015\074\016" +
    "\075\023\067\057\077\001\002\000\004\024\uffe5\001\002" +
    "\000\004\022\220\001\002\000\026\005\063\010\013\011" +
    "\011\012\014\013\012\014\015\015\074\016\075\023\067" +
    "\057\077\001\002\000\004\024\uffe6\001\002\000\004\022" +
    "\223\001\002\000\026\005\063\010\013\011\011\012\014" +
    "\013\012\014\015\015\074\016\075\023\067\057\077\001" +
    "\002\000\004\024\uffe4\001\002\000\004\022\226\001\002" +
    "\000\026\005\063\010\013\011\011\012\014\013\012\014" +
    "\015\015\074\016\075\023\067\057\077\001\002\000\052" +
    "\011\011\013\012\014\015\024\113\027\ufff3\033\045\034" +
    "\055\041\056\042\052\043\051\044\036\045\030\047\054" +
    "\050\032\051\042\052\034\053\050\054\ufff3\055\ufff3\056" +
    "\035\001\002\000\010\027\uffd4\054\uffd4\055\uffd4\001\002" +
    "\000\004\022\232\001\002\000\026\005\063\010\013\011" +
    "\011\012\014\013\012\014\015\015\074\016\075\023\067" +
    "\057\077\001\002\000\052\011\011\013\012\014\015\024" +
    "\113\027\ufff3\033\045\034\055\041\056\042\052\043\051" +
    "\044\036\045\030\047\054\050\032\051\042\052\034\053" +
    "\050\054\ufff3\055\ufff3\056\035\001\002\000\010\027\uffd3" +
    "\054\uffd3\055\uffd3\001\002\000\010\027\ufff4\054\ufff4\055" +
    "\ufff4\001\002\000\050\011\011\013\012\014\015\027\ufff3" +
    "\033\045\034\055\041\056\042\052\043\051\044\036\045" +
    "\030\047\054\050\032\051\042\052\034\053\050\054\ufff3" +
    "\055\ufff3\056\035\001\002\000\010\027\ufff6\054\ufff6\055" +
    "\ufff6\001\002\000\004\002\ufffd\001\002\000\044\011\011" +
    "\013\012\014\015\027\ufff3\033\045\034\055\041\056\042" +
    "\052\043\051\044\036\045\030\047\054\050\032\051\042" +
    "\052\034\053\050\056\035\001\002\000\004\027\243\001" +
    "\002\000\004\050\244\001\002\000\004\016\245\001\002" +
    "\000\022\005\063\010\013\011\011\012\014\013\012\014" +
    "\015\016\075\023\067\001\002\000\032\004\130\005\124" +
    "\006\126\007\127\017\247\020\125\021\133\022\134\023" +
    "\135\036\123\037\136\040\131\001\002\000\052\011\011" +
    "\013\012\014\015\024\113\027\ufff3\033\045\034\055\041" +
    "\056\042\052\043\051\044\036\045\030\047\054\050\032" +
    "\051\042\052\034\053\050\054\ufff3\055\ufff3\056\035\001" +
    "\002\000\010\027\uffe7\054\uffe7\055\uffe7\001\002\000\012" +
    "\010\013\012\014\015\253\017\254\001\002\000\006\017" +
    "\uffd7\030\uffd7\001\002\000\010\011\011\013\012\014\015" +
    "\001\002\000\004\026\262\001\002\000\006\017\uffd8\030" +
    "\uffd8\001\002\000\006\017\260\030\257\001\002\000\010" +
    "\010\013\012\014\015\253\001\002\000\004\026\262\001" +
    "\002\000\010\027\uffdb\054\uffdb\055\uffdb\001\002\000\044" +
    "\011\011\013\012\014\015\027\ufff3\033\045\034\055\041" +
    "\056\042\052\043\051\044\036\045\030\047\054\050\032" +
    "\051\042\052\034\053\050\056\035\001\002\000\004\027" +
    "\264\001\002\000\050\011\011\013\012\014\015\027\ufff3" +
    "\033\045\034\055\041\056\042\052\043\051\044\036\045" +
    "\030\047\054\050\032\051\042\052\034\053\050\054\ufff3" +
    "\055\ufff3\056\035\001\002\000\010\027\ufffc\054\ufffc\055" +
    "\ufffc\001\002\000\006\017\uffd9\030\uffd9\001\002\000\010" +
    "\027\uffda\054\uffda\055\uffda\001\002\000\004\015\271\001" +
    "\002\000\006\017\uffd6\030\uffd6\001\002\000\022\005\063" +
    "\010\013\011\011\012\014\013\012\014\015\016\075\023" +
    "\067\001\002\000\032\004\130\005\124\006\126\007\127" +
    "\017\274\020\125\021\133\022\134\023\135\036\123\037" +
    "\136\040\131\001\002\000\004\026\275\001\002\000\044" +
    "\011\011\013\012\014\015\027\ufff3\033\045\034\055\041" +
    "\056\042\052\043\051\044\036\045\030\047\054\050\032" +
    "\051\042\052\034\053\050\056\035\001\002\000\004\027" +
    "\277\001\002\000\006\044\036\045\030\001\002\000\010" +
    "\027\uffed\054\uffed\055\uffed\001\002\000\022\005\063\010" +
    "\013\011\011\012\014\013\012\014\015\016\075\023\067" +
    "\001\002\000\032\004\130\005\124\006\126\007\127\017" +
    "\303\020\125\021\133\022\134\023\135\036\123\037\136" +
    "\040\131\001\002\000\052\011\011\013\012\014\015\024" +
    "\113\027\ufff3\033\045\034\055\041\056\042\052\043\051" +
    "\044\036\045\030\047\054\050\032\051\042\052\034\053" +
    "\050\054\ufff3\055\ufff3\056\035\001\002\000\010\027\ufff2" +
    "\054\ufff2\055\ufff2\001\002\000\004\010\307\001\002\000" +
    "\004\017\311\001\002\000\004\017\uffdf\001\002\000\004" +
    "\017\uffde\001\002\000\004\026\312\001\002\000\006\054" +
    "\313\055\314\001\002\000\004\025\322\001\002\000\004" +
    "\010\316\001\002\000\010\027\uffe2\054\uffe2\055\uffe2\001" +
    "\002\000\004\025\317\001\002\000\046\011\011\013\012" +
    "\014\015\033\045\034\055\041\056\042\052\043\051\044" +
    "\036\045\030\047\054\050\032\051\042\052\034\053\050" +
    "\054\ufff3\055\ufff3\056\035\001\002\000\006\054\313\055" +
    "\314\001\002\000\010\027\uffe1\054\uffe1\055\uffe1\001\002" +
    "\000\044\011\011\013\012\014\015\027\ufff3\033\045\034" +
    "\055\041\056\042\052\043\051\044\036\045\030\047\054" +
    "\050\032\051\042\052\034\053\050\056\035\001\002\000" +
    "\004\027\324\001\002\000\052\011\011\013\012\014\015" +
    "\024\113\027\ufff3\033\045\034\055\041\056\042\052\043" +
    "\051\044\036\045\030\047\054\050\032\051\042\052\034" +
    "\053\050\054\ufff3\055\ufff3\056\035\001\002\000\010\027" +
    "\uffe0\054\uffe0\055\uffe0\001\002\000\022\005\063\010\013" +
    "\011\011\012\014\013\012\014\015\016\075\023\067\001" +
    "\002\000\032\004\130\005\124\006\126\007\127\017\330" +
    "\020\125\021\133\022\134\023\135\036\123\037\136\040" +
    "\131\001\002\000\004\026\331\001\002\000\044\011\011" +
    "\013\012\014\015\027\ufff3\033\045\034\055\041\056\042" +
    "\052\043\051\044\036\045\030\047\054\050\032\051\042" +
    "\052\034\053\050\056\035\001\002\000\004\027\333\001" +
    "\002\000\052\011\011\013\012\014\015\024\113\027\ufff3" +
    "\033\045\034\055\041\056\042\052\043\051\044\036\045" +
    "\030\047\054\050\032\051\042\052\034\053\050\054\ufff3" +
    "\055\ufff3\056\035\001\002\000\010\027\uffe8\054\uffe8\055" +
    "\uffe8\001\002\000\044\011\011\013\012\014\015\027\ufff3" +
    "\033\045\034\055\041\056\042\052\043\051\044\036\045" +
    "\030\047\054\050\032\051\042\052\034\053\050\056\035" +
    "\001\002\000\004\016\337\001\002\000\022\005\063\010" +
    "\013\011\011\012\014\013\012\014\015\016\075\023\067" +
    "\001\002\000\032\004\130\005\124\006\126\007\127\017" +
    "\341\020\125\021\133\022\134\023\135\036\123\037\136" +
    "\040\131\001\002\000\004\026\342\001\002\000\044\011" +
    "\011\013\012\014\015\027\ufff3\033\045\034\055\041\056" +
    "\042\052\043\051\044\036\045\030\047\054\050\032\051" +
    "\042\052\034\053\050\056\035\001\002\000\004\027\344" +
    "\001\002\000\004\045\030\001\002\000\010\027\uffea\054" +
    "\uffea\055\uffea\001\002\000\004\027\347\001\002\000\052" +
    "\011\011\013\012\014\015\024\113\027\ufff3\033\045\034" +
    "\055\041\056\042\052\043\051\044\036\045\030\047\054" +
    "\050\032\051\042\052\034\053\050\054\ufff3\055\ufff3\056" +
    "\035\001\002\000\010\027\uffeb\054\uffeb\055\uffeb\001\002" +
    "\000\012\010\013\012\014\015\253\017\352\001\002\000" +
    "\052\011\011\013\012\014\015\024\113\027\ufff3\033\045" +
    "\034\055\041\056\042\052\043\051\044\036\045\030\047" +
    "\054\050\032\051\042\052\034\053\050\054\ufff3\055\ufff3" +
    "\056\035\001\002\000\006\017\354\030\257\001\002\000" +
    "\052\011\011\013\012\014\015\024\113\027\ufff3\033\045" +
    "\034\055\041\056\042\052\043\051\044\036\045\030\047" +
    "\054\050\032\051\042\052\034\053\050\054\ufff3\055\ufff3" +
    "\056\035\001\002\000\010\027\uffdd\054\uffdd\055\uffdd\001" +
    "\002\000\010\027\uffdc\054\uffdc\055\uffdc\001\002\000\004" +
    "\035\360\001\002\000\010\033\007\034\004\046\005\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\002\005\001\001\000\010\030\356\031" +
    "\015\032\007\001\001\000\004\031\023\001\001\000\002" +
    "\001\001\000\010\030\016\031\015\032\007\001\001\000" +
    "\010\030\021\031\015\032\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\020\031\015\032\007\001\001" +
    "\000\004\002\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\024" +
    "\001\001\000\002\001\001\000\034\006\043\007\037\010" +
    "\046\011\056\012\042\013\052\014\032\016\057\021\045" +
    "\022\030\024\036\031\040\040\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\235\031\015\032\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\230\001\001\000\004\031\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\167\031\015\032\007\001" +
    "\001\000\004\031\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\026\075\031\070\032" +
    "\063\033\064\034\065\035\072\036\067\037\071\001\001" +
    "\000\020\031\070\032\120\033\162\034\121\035\072\036" +
    "\067\037\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\070\032\120\033\166\034" +
    "\121\035\072\036\067\037\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\164\001\001\000\020\031\070\032\120\033\116" +
    "\034\121\035\072\036\067\037\117\001\001\000\036\006" +
    "\113\007\037\010\046\011\056\012\042\013\052\014\032" +
    "\016\057\021\045\022\030\024\036\025\114\031\040\040" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\103\031\105\001" +
    "\001\000\002\001\001\000\006\027\107\031\105\001\001" +
    "\000\006\027\106\031\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\115\007\037\010\046\011\056\012\042\013\052\014" +
    "\032\016\057\021\045\022\030\024\036\031\040\040\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\070\032\120\033\163\034" +
    "\121\035\072\036\067\037\117\001\001\000\020\031\070" +
    "\032\120\033\161\034\121\035\072\036\067\037\117\001" +
    "\001\000\020\031\070\032\120\033\155\034\121\035\072" +
    "\036\067\037\117\001\001\000\020\031\070\032\120\033" +
    "\152\034\121\035\072\036\067\037\117\001\001\000\020" +
    "\031\070\032\120\033\151\034\121\035\072\036\067\037" +
    "\117\001\001\000\020\031\070\032\120\033\147\034\121" +
    "\035\072\036\067\037\117\001\001\000\020\031\070\032" +
    "\120\033\146\034\121\035\072\036\067\037\117\001\001" +
    "\000\002\001\001\000\020\031\070\032\120\033\143\034" +
    "\121\035\072\036\067\037\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\070\032\120\033\136\034" +
    "\121\035\072\036\067\037\117\001\001\000\002\001\001" +
    "\000\020\031\070\032\120\033\140\034\121\035\072\036" +
    "\067\037\117\001\001\000\002\001\001\000\020\031\070" +
    "\032\120\033\142\034\121\035\072\036\067\037\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\031\070" +
    "\032\120\033\145\034\121\035\072\036\067\037\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\070\032\120\033\154\034\121\035\072\036\067" +
    "\037\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\070\032\120\033\157\034\121\035\072\036\067" +
    "\037\117\001\001\000\002\001\001\000\020\031\070\032" +
    "\120\033\162\034\121\035\072\036\067\037\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\171\007\037\010\046\011\056\012" +
    "\042\013\052\014\032\016\057\021\045\022\030\024\036" +
    "\031\040\040\026\001\001\000\002\001\001\000\006\015" +
    "\176\037\177\001\001\000\004\031\221\001\001\000\004" +
    "\031\216\001\001\000\004\031\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\026\201\031\070\032\063" +
    "\033\064\034\065\035\072\036\067\037\071\001\001\000" +
    "\002\001\001\000\020\031\070\032\120\033\064\034\121" +
    "\035\072\036\203\037\117\001\001\000\002\001\001\000" +
    "\020\031\070\032\120\033\064\034\205\035\072\036\067" +
    "\037\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\210\007\037\010\046\011\056\012\042\013\052" +
    "\014\032\016\057\021\045\022\030\024\036\031\040\040" +
    "\026\001\001\000\002\001\001\000\036\006\113\007\037" +
    "\010\046\011\056\012\042\013\052\014\032\016\057\021" +
    "\045\022\030\024\036\025\212\031\040\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\026\215\031" +
    "\070\032\063\033\064\034\065\035\072\036\067\037\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\026" +
    "\220\031\070\032\063\033\064\034\065\035\072\036\067" +
    "\037\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\026\223\031\070\032\063\033\064\034\065\035\072" +
    "\036\067\037\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\026\226\031\070\032\063\033\064\034\065" +
    "\035\072\036\067\037\071\001\001\000\036\006\113\007" +
    "\037\010\046\011\056\012\042\013\052\014\032\016\057" +
    "\021\045\022\030\024\036\025\227\031\040\040\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\232" +
    "\031\070\032\063\033\064\034\065\035\072\036\067\037" +
    "\071\001\001\000\036\006\113\007\037\010\046\011\056" +
    "\012\042\013\052\014\032\016\057\021\045\022\030\024" +
    "\036\025\233\031\040\040\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\236\007\037\010\046\011" +
    "\056\012\042\013\052\014\032\016\057\021\045\022\030" +
    "\024\036\031\040\040\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\241\007\037\010\046\011\056" +
    "\012\042\013\052\014\032\016\057\021\045\022\030\024" +
    "\036\031\040\040\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\070\032\120\033" +
    "\245\034\121\035\072\036\067\037\117\001\001\000\002" +
    "\001\001\000\036\006\113\007\037\010\046\011\056\012" +
    "\042\013\052\014\032\016\057\021\045\022\030\024\036" +
    "\025\247\031\040\040\026\001\001\000\002\001\001\000" +
    "\010\023\255\032\251\037\254\001\001\000\002\001\001" +
    "\000\004\031\267\001\001\000\004\004\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\265\032\251" +
    "\037\254\001\001\000\004\004\260\001\001\000\002\001" +
    "\001\000\034\006\262\007\037\010\046\011\056\012\042" +
    "\013\052\014\032\016\057\021\045\022\030\024\036\031" +
    "\040\040\026\001\001\000\002\001\001\000\034\006\264" +
    "\007\037\010\046\011\056\012\042\013\052\014\032\016" +
    "\057\021\045\022\030\024\036\031\040\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\070\032\120" +
    "\033\272\034\121\035\072\036\067\037\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\275\007\037" +
    "\010\046\011\056\012\042\013\052\014\032\016\057\021" +
    "\045\022\030\024\036\031\040\040\026\001\001\000\002" +
    "\001\001\000\006\011\277\012\042\001\001\000\002\001" +
    "\001\000\020\031\070\032\120\033\301\034\121\035\072" +
    "\036\067\037\117\001\001\000\002\001\001\000\036\006" +
    "\113\007\037\010\046\011\056\012\042\013\052\014\032" +
    "\016\057\021\045\022\030\024\036\025\303\031\040\040" +
    "\026\001\001\000\002\001\001\000\006\020\305\037\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\317\007\037\010\046\011\056\012\042" +
    "\013\052\014\032\016\057\021\045\022\030\024\036\031" +
    "\040\040\026\001\001\000\004\017\320\001\001\000\002" +
    "\001\001\000\034\006\322\007\037\010\046\011\056\012" +
    "\042\013\052\014\032\016\057\021\045\022\030\024\036" +
    "\031\040\040\026\001\001\000\002\001\001\000\036\006" +
    "\113\007\037\010\046\011\056\012\042\013\052\014\032" +
    "\016\057\021\045\022\030\024\036\025\324\031\040\040" +
    "\026\001\001\000\002\001\001\000\020\031\070\032\120" +
    "\033\326\034\121\035\072\036\067\037\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\331\007\037" +
    "\010\046\011\056\012\042\013\052\014\032\016\057\021" +
    "\045\022\030\024\036\031\040\040\026\001\001\000\002" +
    "\001\001\000\036\006\113\007\037\010\046\011\056\012" +
    "\042\013\052\014\032\016\057\021\045\022\030\024\036" +
    "\025\333\031\040\040\026\001\001\000\002\001\001\000" +
    "\034\006\345\007\037\010\046\011\056\012\042\013\052" +
    "\014\032\016\057\021\045\022\030\024\036\031\040\040" +
    "\026\001\001\000\002\001\001\000\020\031\070\032\120" +
    "\033\337\034\121\035\072\036\067\037\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\342\007\037" +
    "\010\046\011\056\012\042\013\052\014\032\016\057\021" +
    "\045\022\030\024\036\031\040\040\026\001\001\000\002" +
    "\001\001\000\004\012\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\006\113\007\037\010\046\011\056" +
    "\012\042\013\052\014\032\016\057\021\045\022\030\024" +
    "\036\025\347\031\040\040\026\001\001\000\002\001\001" +
    "\000\010\023\352\032\251\037\254\001\001\000\036\006" +
    "\113\007\037\010\046\011\056\012\042\013\052\014\032" +
    "\016\057\021\045\022\030\024\036\025\355\031\040\040" +
    "\026\001\001\000\002\001\001\000\036\006\113\007\037" +
    "\010\046\011\056\012\042\013\052\014\032\016\057\021" +
    "\045\022\030\024\036\025\354\031\040\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\360\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Erroe Sintactico en la linea "+s.left+" Columna "+s.right+". No se esperaba este componente: "+s.value+".");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= CLASS Alfabeto LlavesAp 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= COMENTARIOS Comentario Inicio 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= COMENINICIAL Comentario COMENFINAL Inicio 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LlavesAp ::= LLAVE1 Instruccion LLAVE2 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesAp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LlavesMet ::= LLAVE1 Instruccion LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesMet",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruccion ::= PalabrasReservadas 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruccion ::= Metodos 
            {
              Object RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruccion ::= Sentencias 
            {
              Object RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruccion ::= Llamada 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruccion ::= Consola 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruccion ::= COMENTARIOS Comentario Instruccion 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruccion ::= COMENINICIAL Comentario COMENFINAL Instruccion 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruccion ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruccion ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Consola ::= CONSOLE PAR1 Operaciones PAR2 FinalLinea 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consola",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencias ::= SentenciaIfElse 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencias ::= SentenciaFor 
            {
              Object RESULT =null;
		int sfoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sfo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencias ::= SentenciaWhile 
            {
              Object RESULT =null;
		int sewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sewright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sew = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencias ::= SentenciaSwitch 
            {
              Object RESULT =null;
		int sswleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sswright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ssw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SentenciaIfElse ::= IF PAR1 Operaciones PAR2 LLAVE1 Instruccion LLAVE2 SentenciaIfElse 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaIfElse",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SentenciaIfElse ::= IfElseIf 
            {
              Object RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaIfElse",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IfElseIf ::= ELSE LLAVE1 Instruccion LLAVE2 FinalLinea 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfElseIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IfElseIf ::= ELSE IF PAR1 Operaciones PAR2 LLAVE1 Instruccion LLAVE2 IfElseIf 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfElseIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SentenciaFor ::= FOR PAR1 Comando PUNTOYCOMA Relacionales PUNTOYCOMA Expresiones PAR2 LLAVE1 Instruccion LLAVE2 FinalLinea 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SentenciaWhile ::= WHILE PAR1 Operaciones PAR2 LLAVE1 Instruccion LLAVE2 FinalLinea 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SentenciaWhile ::= DO LLAVE1 Instruccion LLAVE2 WHILE PAR1 Operaciones PAR2 FinalLinea 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Comando ::= VAR Alfabeto IGUAL Caracter 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Comando ::= LET Alfabeto IGUAL Caracter 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Comando ::= CONST Alfabeto IGUAL Caracter 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Comando ::= VariableGlobal IGUAL Caracter 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SentenciaSwitch ::= SWITCH PAR1 Elegir PAR2 LLAVE1 Casos 
            {
              Object RESULT =null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ele = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaSwitch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Casos ::= CASE ENTEROS DOSPUNTOS Instruccion Casos 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Casos ::= DEFAULT DOSPUNTOS Instruccion LLAVE2 FinalLinea 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Elegir ::= ENTEROS 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elegir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Elegir ::= VariableGlobal 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elegir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Llamada ::= MetodoReservado PAR1 Variables PAR2 FinalLinea 
            {
              Object RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Llamada ::= MetodoReservado PAR1 PAR2 FinalLinea 
            {
              Object RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Metodos ::= Alfabeto PAR1 Variables PAR2 LlavesMet 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Metodos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Metodos ::= Alfabeto PAR1 PAR2 LlavesMet 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Metodos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Variables ::= Variables COMA Variables 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Variables ::= VariableGlobal 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Variables ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Variables ::= CADENAS Alfabeto CADENAS 
            {
              Object RESULT =null;
		int alf1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alf1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PalabrasReservadas ::= VAR Alfabeto IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PalabrasReservadas ::= LET Alfabeto IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PalabrasReservadas ::= CONST Alfabeto IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FinalLinea ::= PUNTOYCOMA Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FinalLinea",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FinalLinea ::= Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FinalLinea",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Caracter ::= VariableGlobal 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Caracter ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Caracter ::= CADENAS Alfabeto CADENAS 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Caracter ::= Expresiones 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Caracter ::= REQUIRE PAR1 CADENAS PUNTO PUNTO Direccion2 CADENAS PAR2 
            {
              Object RESULT =null;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Direccion2 ::= Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Direccion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Direccion2 ::= Alfabeto Direccion2 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Direccion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Direccion2 ::= DIVIDIDO Direccion2 
            {
              Object RESULT =null;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Direccion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Comentario ::= Alfabeto Comentario 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Comentario ::= Numero Comentario 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Comentario ::= Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Comentario ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Alfabeto ::= LETRAS 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String let = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alfabeto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Alfabeto ::= ENTEROS2 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alfabeto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Alfabeto ::= COMBINACION 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alfabeto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Numero ::= ENTEROS 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Numero ::= DECIMALES 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Operaciones ::= Expresiones 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Operaciones ::= Logicos 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Operaciones ::= Relacionales 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Operaciones ::= Numero 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Operaciones ::= VariableGlobal 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Operaciones ::= PAR1 Operaciones PAR2 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresiones ::= Operaciones MAS Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresiones ::= Operaciones MENOS Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresiones ::= Operaciones POR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresiones ::= Operaciones DIVIDIDO Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresiones ::= Operaciones POR POR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresiones ::= Operaciones PORCENTAJE Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresiones ::= Operaciones MAS MAS 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresiones ::= Operaciones MENOS MENOS 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresiones ::= MENOS Operaciones 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Logicos ::= Operaciones AND Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logicos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Logicos ::= Operaciones OR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logicos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Logicos ::= NOT Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logicos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Relacionales ::= Operaciones IGUAL IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Relacionales ::= Operaciones NOT IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Relacionales ::= Operaciones MENOR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Relacionales ::= Operaciones MAYOR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Relacionales ::= Operaciones MENOR IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Relacionales ::= Operaciones MAYOR IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Relacionales ::= Alfabeto 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
