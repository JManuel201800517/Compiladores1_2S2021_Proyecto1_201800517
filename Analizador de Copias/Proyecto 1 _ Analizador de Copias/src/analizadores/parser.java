
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import proyecto.pkg1.pkg_.analizador.de.copias.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\006\000\002\045\005\000\002\041\004" +
    "\000\002\041\004\000\002\041\002\000\002\003\006\000" +
    "\002\003\005\000\002\003\006\000\002\004\006\000\002" +
    "\004\005\000\002\004\006\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\002\000\002\006\004\000" +
    "\002\006\006\000\002\006\006\000\002\007\007\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\012\000\002\011\003\000\002\012\007" +
    "\000\002\012\013\000\002\013\016\000\002\014\012\000" +
    "\002\014\013\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\015\005\000\002\042\004\000\002\042" +
    "\004\000\002\042\003\000\002\042\003\000\002\016\012" +
    "\000\002\017\007\000\002\017\005\000\002\020\003\000" +
    "\002\020\003\000\002\021\006\000\002\021\005\000\002" +
    "\022\006\000\002\022\005\000\002\043\004\000\002\043" +
    "\004\000\002\043\003\000\002\023\005\000\002\023\003" +
    "\000\002\044\004\000\002\044\004\000\002\044\003\000" +
    "\002\024\007\000\002\024\007\000\002\024\007\000\002" +
    "\024\006\000\002\025\004\000\002\025\003\000\002\026" +
    "\003\000\002\026\011\000\002\027\003\000\002\027\004" +
    "\000\002\027\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\004\000" +
    "\002\033\003\000\002\033\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\006\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\004\000\002\035\005\000\002\035\005\000" +
    "\002\035\004\000\002\036\006\000\002\036\006\000\002" +
    "\036\005\000\002\036\005\000\002\036\006\000\002\036" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\010\034\007\035\004\047\005\001\002\000" +
    "\014\010\014\011\011\012\015\013\012\015\013\001\002" +
    "\000\022\010\014\011\011\012\015\013\012\015\013\027" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\004\002\023\001\002" +
    "\000\014\010\014\011\011\012\015\013\012\015\013\001" +
    "\002\000\026\010\014\011\011\012\015\013\012\015\013" +
    "\027\uffb6\034\uffb6\035\uffb6\036\uffb6\047\uffb6\001\002\000" +
    "\124\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\001\002\000\124\002\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\001\002\000\124\002\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\124\002" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\001\002\000\124\002\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002" +
    "\000\026\010\014\011\011\012\015\013\012\015\013\027" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\047\uffb7\001\002\000\010" +
    "\034\007\035\004\047\005\001\002\000\004\002\uffff\001" +
    "\002\000\014\027\uffb9\034\uffb9\035\uffb9\036\uffb9\047\uffb9" +
    "\001\002\000\014\027\uffb8\034\uffb8\035\uffb8\036\uffb8\047" +
    "\uffb8\001\002\000\004\002\001\001\002\000\022\010\014" +
    "\011\011\012\015\013\012\015\013\027\ufffa\034\ufffa\035" +
    "\ufffa\001\002\000\010\027\032\034\033\035\031\001\002" +
    "\000\022\010\014\011\011\012\015\013\012\015\013\027" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\010\027\ufffc\034\ufffc" +
    "\035\ufffc\001\002\000\004\002\000\001\002\000\014\010" +
    "\014\011\011\012\015\013\012\015\013\001\002\000\054" +
    "\010\014\011\011\012\015\013\012\015\013\017\037\030" +
    "\uffed\034\044\035\053\042\072\043\065\044\040\045\050" +
    "\046\063\047\047\050\046\051\064\052\073\053\061\054" +
    "\056\057\074\001\002\000\014\010\014\011\011\012\015" +
    "\013\012\015\013\001\002\000\010\027\032\034\033\035" +
    "\031\001\002\000\012\002\ufff8\030\ufff8\055\ufff8\056\ufff8" +
    "\001\002\000\026\005\077\010\014\011\011\012\015\013" +
    "\012\015\013\016\076\017\103\020\363\024\105\001\002" +
    "\000\026\005\uffca\010\uffca\011\uffca\012\uffca\013\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\024\uffca\001\002\000\014" +
    "\010\014\011\011\012\015\013\012\015\013\001\002\000" +
    "\004\023\352\001\002\000\012\002\ufff2\030\ufff2\055\ufff2" +
    "\056\ufff2\001\002\000\012\002\uffe5\030\uffe5\055\uffe5\056" +
    "\uffe5\001\002\000\014\010\014\011\011\012\015\013\012" +
    "\015\013\001\002\000\012\002\ufff0\030\ufff0\055\ufff0\056" +
    "\ufff0\001\002\000\004\017\315\001\002\000\022\010\014" +
    "\011\011\012\015\013\012\015\013\027\ufffa\034\ufffa\035" +
    "\ufffa\001\002\000\004\017\304\001\002\000\012\002\uffef" +
    "\030\uffef\055\uffef\056\uffef\001\002\000\004\030\302\001" +
    "\002\000\014\010\014\011\011\012\015\013\012\015\013" +
    "\001\002\000\012\002\uffe6\030\uffe6\055\uffe6\056\uffe6\001" +
    "\002\000\012\002\uffe8\030\uffe8\055\uffe8\056\uffe8\001\002" +
    "\000\004\025\276\001\002\000\012\002\uffee\030\uffee\055" +
    "\uffee\056\uffee\001\002\000\012\002\uffe3\030\uffe3\055\uffe3" +
    "\056\uffe3\001\002\000\004\017\255\001\002\000\012\002" +
    "\ufff3\030\ufff3\055\ufff3\056\ufff3\001\002\000\006\027\241" +
    "\045\242\001\002\000\004\017\232\001\002\000\014\010" +
    "\014\011\011\012\015\013\012\015\013\001\002\000\012" +
    "\002\ufff1\030\ufff1\055\ufff1\056\ufff1\001\002\000\012\002" +
    "\uffe7\030\uffe7\055\uffe7\056\uffe7\001\002\000\020\010\014" +
    "\011\011\012\015\013\012\015\013\017\037\023\uffd6\001" +
    "\002\000\020\010\014\011\011\012\015\013\012\015\013" +
    "\017\037\023\uffd7\001\002\000\014\010\014\011\011\012" +
    "\015\013\012\015\013\001\002\000\004\027\170\001\002" +
    "\000\004\017\075\001\002\000\024\005\077\010\014\011" +
    "\011\012\015\013\012\015\013\016\076\017\103\024\105" +
    "\001\002\000\016\010\014\011\011\012\015\013\012\015" +
    "\013\016\162\001\002\000\024\005\077\010\014\011\011" +
    "\012\015\013\012\015\013\016\076\017\103\024\105\001" +
    "\002\000\032\004\117\005\113\006\115\007\116\020\155" +
    "\021\114\022\121\023\122\024\123\037\112\040\124\041" +
    "\120\001\002\000\116\002\uffae\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\015\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\030\uffae\031\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\001\002\000\116\002\uffaa\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\030\uffaa\031\uffaa\034\uffaa\035\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\001\002\000\024\005\077\010\014" +
    "\011\011\012\015\013\012\015\013\016\076\017\103\024" +
    "\105\001\002\000\116\002\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\030\uffaf\031\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\001\002\000\024\005\077\010\014\011\011" +
    "\012\015\013\012\015\013\016\076\017\103\024\105\001" +
    "\002\000\116\002\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad" +
    "\031\uffad\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\001\002\000\116\002\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\030\uffb0\031\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\001\002\000\116\002\uffac\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\015" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\030\uffac\031\uffac\034\uffac\035\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\001\002\000\116\002\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\015\uff9d\017\uff9d\020\uff9d\021\114\022\121\023\122" +
    "\024\123\025\uff9d\030\uff9d\031\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\024\005\077" +
    "\010\014\011\011\012\015\013\012\015\013\016\076\017" +
    "\103\024\105\001\002\000\024\005\147\010\014\011\011" +
    "\012\015\013\012\015\013\016\076\017\103\024\105\001" +
    "\002\000\026\005\077\010\014\011\011\012\015\013\012" +
    "\015\013\016\076\017\103\023\145\024\105\001\002\000" +
    "\026\005\077\006\142\010\014\011\011\012\015\013\012" +
    "\015\013\016\076\017\103\024\105\001\002\000\024\005" +
    "\077\010\014\011\011\012\015\013\012\015\013\016\076" +
    "\017\103\024\105\001\002\000\026\004\137\005\077\010" +
    "\014\011\011\012\015\013\012\015\013\016\076\017\103" +
    "\024\105\001\002\000\024\005\077\010\014\011\011\012" +
    "\015\013\012\015\013\016\076\017\103\024\105\001\002" +
    "\000\026\005\077\010\014\011\011\012\015\013\012\015" +
    "\013\016\076\017\103\023\133\024\105\001\002\000\004" +
    "\023\130\001\002\000\004\023\126\001\002\000\024\005" +
    "\077\010\014\011\011\012\015\013\012\015\013\016\076" +
    "\017\103\024\105\001\002\000\116\002\uff9e\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\015\uff9e\017\uff9e\020\uff9e\021\114\022\121\023\122\024" +
    "\123\025\uff9e\030\uff9e\031\uff9e\034\uff9e\035\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\001\002\000\024\005\077\010" +
    "\014\011\011\012\015\013\012\015\013\016\076\017\103" +
    "\024\105\001\002\000\116\002\uff9b\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b" +
    "\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\030\uff9b\031\uff9b\034\uff9b\035\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\024\005\077\010\014\011" +
    "\011\012\015\013\012\015\013\016\076\017\103\024\105" +
    "\001\002\000\116\002\uff9c\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\030" +
    "\uff9c\031\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\057\uff9c\001\002\000\116\002\uff99\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\015\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\030\uff99\031\uff99\034\uff99\035\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99" +
    "\056\uff99\057\uff99\001\002\000\024\005\077\010\014\011" +
    "\011\012\015\013\012\015\013\016\076\017\103\024\105" +
    "\001\002\000\116\002\uff97\004\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\013\uff97\015\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\030" +
    "\uff97\031\uff97\034\uff97\035\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97" +
    "\057\uff97\001\002\000\116\002\uffa3\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3" +
    "\017\uffa3\020\uffa3\021\114\022\121\023\122\024\123\025" +
    "\uffa3\030\uffa3\031\uffa3\034\uffa3\035\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\001\002\000\116\002\uffa8\004\uffa8\005" +
    "\uffa8\006\115\007\116\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\015\uffa8\017\uffa8\020\uffa8\021\114\022\121\023\122\024" +
    "\123\025\uffa8\030\uffa8\031\uffa8\034\uffa8\035\uffa8\037\112" +
    "\040\124\041\120\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\001\002\000\116\002\uffa2\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\015\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\030\uffa2\031\uffa2\034\uffa2\035\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002\000\116\002" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\015\uffa5\017\uffa5\020\uffa5\021\114\022" +
    "\121\023\122\024\123\025\uffa5\030\uffa5\031\uffa5\034\uffa5" +
    "\035\uffa5\037\112\040\124\041\120\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002\000" +
    "\116\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\020\uffa6\021" +
    "\114\022\121\023\122\024\123\025\uffa6\030\uffa6\031\uffa6" +
    "\034\uffa6\035\uffa6\037\112\040\124\041\120\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001" +
    "\002\000\024\005\077\010\014\011\011\012\015\013\012" +
    "\015\013\016\076\017\103\024\105\001\002\000\116\002" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\015\uffa4\017\uffa4\020\uffa4\021\114\022" +
    "\121\023\122\024\123\025\uffa4\030\uffa4\031\uffa4\034\uffa4" +
    "\035\uffa4\037\112\040\124\041\120\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\001\002\000" +
    "\116\002\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\015\uff9a\017\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\030\uff9a\031\uff9a" +
    "\034\uff9a\035\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001" +
    "\002\000\024\005\077\010\014\011\011\012\015\013\012" +
    "\015\013\016\076\017\103\024\105\001\002\000\116\002" +
    "\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\015\uff98\017\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\030\uff98\031\uff98\034\uff98" +
    "\035\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\001\002\000" +
    "\120\002\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\015\uffa1\016\076\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\105\025\uffa1\030\uffa1" +
    "\031\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\041\uffa1\042" +
    "\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\001\002\000\116\002\uffa7\004\uffa7\005\uffa7\006\115" +
    "\007\116\010\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\017" +
    "\uffa7\020\uffa7\021\114\022\121\023\122\024\123\025\uffa7" +
    "\030\uffa7\031\uffa7\034\uffa7\035\uffa7\037\112\040\124\041" +
    "\120\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\001\002\000\116\002\uffa0\004\uffa0\005\uffa0" +
    "\006\115\007\116\010\uffa0\011\uffa0\012\uffa0\013\uffa0\015" +
    "\uffa0\017\uffa0\020\uffa0\021\114\022\121\023\122\024\123" +
    "\025\uffa0\030\uffa0\031\uffa0\034\uffa0\035\uffa0\037\112\040" +
    "\124\041\120\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\057\uffa0\001\002\000\116\002\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\015\uff9f\017\uff9f\020\uff9f\021\114\022\121\023\122" +
    "\024\123\025\uff9f\030\uff9f\031\uff9f\034\uff9f\035\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000\032\004\117" +
    "\005\113\006\115\007\116\020\154\021\114\022\121\023" +
    "\122\024\123\037\112\040\124\041\120\001\002\000\116" +
    "\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011" +
    "\uffa9\012\uffa9\013\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\030\uffa9\031\uffa9\034" +
    "\uffa9\035\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002" +
    "\000\064\002\uffed\010\014\011\011\012\015\013\012\015" +
    "\013\017\037\025\156\030\uffed\034\044\035\053\042\072" +
    "\043\065\044\040\045\050\046\063\047\047\050\046\051" +
    "\064\052\073\053\061\054\056\055\uffed\056\uffed\057\074" +
    "\001\002\000\062\002\uffed\010\014\011\011\012\015\013" +
    "\012\015\013\017\037\030\uffed\034\044\035\053\042\072" +
    "\043\065\044\040\045\050\046\063\047\047\050\046\051" +
    "\064\052\073\053\061\054\056\055\uffed\056\uffed\057\074" +
    "\001\002\000\012\002\uffe9\030\uffe9\055\uffe9\056\uffe9\001" +
    "\002\000\012\002\uffbf\030\uffbf\055\uffbf\056\uffbf\001\002" +
    "\000\012\002\uffc0\030\uffc0\055\uffc0\056\uffc0\001\002\000" +
    "\120\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\030\uffc5" +
    "\031\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\001\002\000\016\010\014\011\011\012\015\013\012" +
    "\015\013\016\162\001\002\000\016\010\014\011\011\012" +
    "\015\013\012\015\013\016\162\001\002\000\116\002\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\013\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\030\uffab\031\uffab\034\uffab\035" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\001\002\000\120" +
    "\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\031" +
    "\uffc7\034\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\001\002\000\120\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\030\uffc6\031\uffc6\034\uffc6\035\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\001\002\000\054\010\014\011\011\012" +
    "\015\013\012\015\013\017\037\030\uffed\034\044\035\053" +
    "\042\072\043\065\044\040\045\050\046\063\047\047\050" +
    "\046\051\064\052\073\053\061\054\056\057\074\001\002" +
    "\000\004\030\172\001\002\000\004\051\173\001\002\000" +
    "\004\017\174\001\002\000\024\005\077\010\014\011\011" +
    "\012\015\013\012\015\013\016\076\017\103\024\105\001" +
    "\002\000\032\004\117\005\113\006\115\007\116\020\176" +
    "\021\114\022\121\023\122\024\123\037\112\040\124\041" +
    "\120\001\002\000\064\002\uffed\010\014\011\011\012\015" +
    "\013\012\015\013\017\037\025\156\030\uffed\034\044\035" +
    "\053\042\072\043\065\044\040\045\050\046\063\047\047" +
    "\050\046\051\064\052\073\053\061\054\056\055\uffed\056" +
    "\uffed\057\074\001\002\000\012\002\uffde\030\uffde\055\uffde" +
    "\056\uffde\001\002\000\016\010\014\011\011\012\015\013" +
    "\012\015\013\023\uffd6\001\002\000\004\023\204\001\002" +
    "\000\016\010\014\011\011\012\015\013\012\015\013\023" +
    "\uffd7\001\002\000\004\023\uffd9\001\002\000\026\005\077" +
    "\010\014\011\011\012\015\013\012\015\013\016\076\017" +
    "\103\024\105\060\207\001\002\000\112\002\uffbe\004\117" +
    "\005\113\006\115\007\116\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\017\uffbe\021\114\022\121\023\122\024\123" +
    "\025\uffbe\030\uffbe\034\uffbe\035\uffbe\037\112\040\124\041" +
    "\120\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\001\002\000\064\002\uffed\010\014\011\011" +
    "\012\015\013\012\015\013\017\037\025\156\030\uffed\034" +
    "\044\035\053\042\072\043\065\044\040\045\050\046\063" +
    "\047\047\050\046\051\064\052\073\053\061\054\056\055" +
    "\uffed\056\uffed\057\074\001\002\000\004\017\210\001\002" +
    "\000\004\016\211\001\002\000\004\032\212\001\002\000" +
    "\004\032\213\001\002\000\020\007\214\010\014\011\011" +
    "\012\015\013\012\015\013\016\162\001\002\000\020\007" +
    "\214\010\014\011\011\012\015\013\012\015\013\016\162" +
    "\001\002\000\004\020\220\001\002\000\022\007\214\010" +
    "\014\011\011\012\015\013\012\015\013\016\162\020\uffbc" +
    "\001\002\000\004\020\uffbb\001\002\000\064\002\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\017\uffbd\025\uffbd" +
    "\030\uffbd\034\uffbd\035\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002\000\004\020" +
    "\uffba\001\002\000\012\002\uffc4\030\uffc4\055\uffc4\056\uffc4" +
    "\001\002\000\004\023\uffd8\001\002\000\026\005\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\024\uffcc\001\002\000\026\005\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\024\uffcb\001\002\000\004\023\227\001\002\000\026\005" +
    "\077\010\014\011\011\012\015\013\012\015\013\016\076" +
    "\017\103\024\105\060\207\001\002\000\064\002\uffed\010" +
    "\014\011\011\012\015\013\012\015\013\017\037\025\156" +
    "\030\uffed\034\044\035\053\042\072\043\065\044\040\045" +
    "\050\046\063\047\047\050\046\051\064\052\073\053\061" +
    "\054\056\055\uffed\056\uffed\057\074\001\002\000\012\002" +
    "\uffc3\030\uffc3\055\uffc3\056\uffc3\001\002\000\024\005\077" +
    "\010\014\011\011\012\015\013\012\015\013\016\076\017" +
    "\103\024\105\001\002\000\032\004\117\005\113\006\115" +
    "\007\116\020\234\021\114\022\121\023\122\024\123\037" +
    "\112\040\124\041\120\001\002\000\004\027\235\001\002" +
    "\000\054\010\014\011\011\012\015\013\012\015\013\017" +
    "\037\030\uffed\034\044\035\053\042\072\043\065\044\040" +
    "\045\050\046\063\047\047\050\046\051\064\052\073\053" +
    "\061\054\056\057\074\001\002\000\004\030\237\001\002" +
    "\000\062\002\uffed\010\014\011\011\012\015\013\012\015" +
    "\013\017\037\030\uffed\034\044\035\053\042\072\043\065" +
    "\044\040\045\050\046\063\047\047\050\046\051\064\052" +
    "\073\053\061\054\056\055\uffed\056\uffed\057\074\001\002" +
    "\000\012\002\uffdf\030\uffdf\055\uffdf\056\uffdf\001\002\000" +
    "\054\010\014\011\011\012\015\013\012\015\013\017\037" +
    "\030\uffed\034\044\035\053\042\072\043\065\044\040\045" +
    "\050\046\063\047\047\050\046\051\064\052\073\053\061" +
    "\054\056\057\074\001\002\000\004\017\243\001\002\000" +
    "\024\005\077\010\014\011\011\012\015\013\012\015\013" +
    "\016\076\017\103\024\105\001\002\000\032\004\117\005" +
    "\113\006\115\007\116\020\245\021\114\022\121\023\122" +
    "\024\123\037\112\040\124\041\120\001\002\000\004\027" +
    "\246\001\002\000\054\010\014\011\011\012\015\013\012" +
    "\015\013\017\037\030\uffed\034\044\035\053\042\072\043" +
    "\065\044\040\045\050\046\063\047\047\050\046\051\064" +
    "\052\073\053\061\054\056\057\074\001\002\000\004\030" +
    "\250\001\002\000\004\046\063\001\002\000\012\002\uffe1" +
    "\030\uffe1\055\uffe1\056\uffe1\001\002\000\004\030\253\001" +
    "\002\000\062\002\uffed\010\014\011\011\012\015\013\012" +
    "\015\013\017\037\030\uffed\034\044\035\053\042\072\043" +
    "\065\044\040\045\050\046\063\047\047\050\046\051\064" +
    "\052\073\053\061\054\056\055\uffed\056\uffed\057\074\001" +
    "\002\000\012\002\uffe2\030\uffe2\055\uffe2\056\uffe2\001\002" +
    "\000\006\010\260\013\257\001\002\000\004\020\261\001" +
    "\002\000\004\020\uffd1\001\002\000\004\020\uffd2\001\002" +
    "\000\004\027\262\001\002\000\006\055\263\056\264\001" +
    "\002\000\004\026\274\001\002\000\004\010\270\001\002" +
    "\000\004\030\266\001\002\000\062\002\uffed\010\014\011" +
    "\011\012\015\013\012\015\013\017\037\030\uffed\034\044" +
    "\035\053\042\072\043\065\044\040\045\050\046\063\047" +
    "\047\050\046\051\064\052\073\053\061\054\056\055\uffed" +
    "\056\uffed\057\074\001\002\000\012\002\uffd5\030\uffd5\055" +
    "\uffd5\056\uffd5\001\002\000\004\026\271\001\002\000\056" +
    "\010\014\011\011\012\015\013\012\015\013\017\037\034" +
    "\044\035\053\042\072\043\065\044\040\045\050\046\063" +
    "\047\047\050\046\051\064\052\073\053\061\054\056\055" +
    "\uffed\056\uffed\057\074\001\002\000\006\055\263\056\264" +
    "\001\002\000\004\030\uffd4\001\002\000\054\010\014\011" +
    "\011\012\015\013\012\015\013\017\037\030\uffed\034\044" +
    "\035\053\042\072\043\065\044\040\045\050\046\063\047" +
    "\047\050\046\051\064\052\073\053\061\054\056\057\074" +
    "\001\002\000\004\030\uffd3\001\002\000\012\002\uffec\030" +
    "\uffec\055\uffec\056\uffec\001\002\000\004\036\300\001\002" +
    "\000\062\002\uffed\010\014\011\011\012\015\013\012\015" +
    "\013\017\037\030\uffed\034\044\035\053\042\072\043\065" +
    "\044\040\045\050\046\063\047\047\050\046\051\064\052" +
    "\073\053\061\054\056\055\uffed\056\uffed\057\074\001\002" +
    "\000\012\002\uffea\030\uffea\055\uffea\056\uffea\001\002\000" +
    "\062\002\uffed\010\014\011\011\012\015\013\012\015\013" +
    "\017\037\030\uffed\034\044\035\053\042\072\043\065\044" +
    "\040\045\050\046\063\047\047\050\046\051\064\052\073" +
    "\053\061\054\056\055\uffed\056\uffed\057\074\001\002\000" +
    "\012\002\ufff9\030\ufff9\055\ufff9\056\ufff9\001\002\000\024" +
    "\005\077\010\014\011\011\012\015\013\012\015\013\016" +
    "\076\017\103\024\105\001\002\000\032\004\117\005\113" +
    "\006\115\007\116\020\306\021\114\022\121\023\122\024" +
    "\123\037\112\040\124\041\120\001\002\000\004\027\307" +
    "\001\002\000\054\010\014\011\011\012\015\013\012\015" +
    "\013\017\037\030\uffed\034\044\035\053\042\072\043\065" +
    "\044\040\045\050\046\063\047\047\050\046\051\064\052" +
    "\073\053\061\054\056\057\074\001\002\000\004\030\311" +
    "\001\002\000\006\045\050\046\063\001\002\000\012\002" +
    "\uffe4\030\uffe4\055\uffe4\056\uffe4\001\002\000\010\027\032" +
    "\034\033\035\031\001\002\000\012\002\ufffd\030\ufffd\055" +
    "\ufffd\056\ufffd\001\002\000\022\010\014\011\011\012\015" +
    "\013\012\015\013\042\317\043\320\044\321\001\002\000" +
    "\004\023\345\001\002\000\014\010\014\011\011\012\015" +
    "\013\012\015\013\001\002\000\014\010\014\011\011\012" +
    "\015\013\012\015\013\001\002\000\014\010\014\011\011" +
    "\012\015\013\012\015\013\001\002\000\004\025\323\001" +
    "\002\000\024\005\077\010\014\011\011\012\015\013\012" +
    "\015\013\016\076\017\103\024\105\001\002\000\032\004" +
    "\117\005\113\006\115\007\116\021\114\022\121\023\122" +
    "\024\123\025\325\037\112\040\124\041\120\001\002\000" +
    "\024\005\077\010\014\011\011\012\015\013\012\015\013" +
    "\016\076\017\103\024\105\001\002\000\032\004\117\005" +
    "\113\006\115\007\116\020\327\021\114\022\121\023\122" +
    "\024\123\037\112\040\124\041\120\001\002\000\004\027" +
    "\330\001\002\000\054\010\014\011\011\012\015\013\012" +
    "\015\013\017\037\030\uffed\034\044\035\053\042\072\043" +
    "\065\044\040\045\050\046\063\047\047\050\046\051\064" +
    "\052\073\053\061\054\056\057\074\001\002\000\004\030" +
    "\332\001\002\000\062\002\uffed\010\014\011\011\012\015" +
    "\013\012\015\013\017\037\030\uffed\034\044\035\053\042" +
    "\072\043\065\044\040\045\050\046\063\047\047\050\046" +
    "\051\064\052\073\053\061\054\056\055\uffed\056\uffed\057" +
    "\074\001\002\000\012\002\uffe0\030\uffe0\055\uffe0\056\uffe0" +
    "\001\002\000\004\023\335\001\002\000\026\005\077\010" +
    "\014\011\011\012\015\013\012\015\013\016\076\017\103" +
    "\024\105\060\207\001\002\000\004\025\uffdb\001\002\000" +
    "\004\023\340\001\002\000\026\005\077\010\014\011\011" +
    "\012\015\013\012\015\013\016\076\017\103\024\105\060" +
    "\207\001\002\000\004\025\uffdc\001\002\000\004\023\343" +
    "\001\002\000\026\005\077\010\014\011\011\012\015\013" +
    "\012\015\013\016\076\017\103\024\105\060\207\001\002" +
    "\000\004\025\uffdd\001\002\000\026\005\077\010\014\011" +
    "\011\012\015\013\012\015\013\016\076\017\103\024\105" +
    "\060\207\001\002\000\004\025\uffda\001\002\000\004\034" +
    "\350\001\002\000\062\002\uffed\010\014\011\011\012\015" +
    "\013\012\015\013\017\037\030\uffed\034\044\035\053\042" +
    "\072\043\065\044\040\045\050\046\063\047\047\050\046" +
    "\051\064\052\073\053\061\054\056\055\uffed\056\uffed\057" +
    "\074\001\002\000\012\002\uffeb\030\uffeb\055\uffeb\056\uffeb" +
    "\001\002\000\026\005\077\010\014\011\011\012\015\013" +
    "\012\015\013\016\076\017\103\024\105\060\207\001\002" +
    "\000\064\002\uffed\010\014\011\011\012\015\013\012\015" +
    "\013\017\037\025\156\030\uffed\034\044\035\053\042\072" +
    "\043\065\044\040\045\050\046\063\047\047\050\046\051" +
    "\064\052\073\053\061\054\056\055\uffed\056\uffed\057\074" +
    "\001\002\000\012\002\uffc1\030\uffc1\055\uffc1\056\uffc1\001" +
    "\002\000\004\023\356\001\002\000\026\005\077\010\014" +
    "\011\011\012\015\013\012\015\013\016\076\017\103\024" +
    "\105\060\207\001\002\000\064\002\uffed\010\014\011\011" +
    "\012\015\013\012\015\013\017\037\025\156\030\uffed\034" +
    "\044\035\053\042\072\043\065\044\040\045\050\046\063" +
    "\047\047\050\046\051\064\052\073\053\061\054\056\055" +
    "\uffed\056\uffed\057\074\001\002\000\012\002\uffc2\030\uffc2" +
    "\055\uffc2\056\uffc2\001\002\000\034\004\117\005\113\006" +
    "\115\007\116\020\uffc8\021\114\022\121\023\122\024\123" +
    "\031\uffc8\037\112\040\124\041\120\001\002\000\006\020" +
    "\u010a\031\u0109\001\002\000\066\002\uffed\010\014\011\011" +
    "\012\015\013\012\015\013\017\037\025\156\027\364\030" +
    "\uffed\034\365\035\370\042\072\043\065\044\040\045\050" +
    "\046\063\047\047\050\046\051\064\052\073\053\061\054" +
    "\056\055\uffed\056\uffed\057\074\001\002\000\054\010\014" +
    "\011\011\012\015\013\012\015\013\017\037\030\uffed\034" +
    "\044\035\053\042\072\043\065\044\040\045\050\046\063" +
    "\047\047\050\046\051\064\052\073\053\061\054\056\057" +
    "\074\001\002\000\014\010\014\011\011\012\015\013\012" +
    "\015\013\001\002\000\012\002\uffcd\030\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\012\002\uffcf\030\uffcf\055\uffcf\056\uffcf" +
    "\001\002\000\014\010\014\011\011\012\015\013\012\015" +
    "\013\001\002\000\004\036\372\001\002\000\064\002\uffed" +
    "\010\014\011\011\012\015\013\012\015\013\017\037\027" +
    "\364\030\uffed\034\365\035\370\042\072\043\065\044\040" +
    "\045\050\046\063\047\047\050\046\051\064\052\073\053" +
    "\061\054\056\055\uffed\056\uffed\057\074\001\002\000\012" +
    "\002\ufff4\030\ufff4\055\ufff4\056\ufff4\001\002\000\010\027" +
    "\364\034\377\035\375\001\002\000\014\010\014\011\011" +
    "\012\015\013\012\015\013\001\002\000\012\002\ufff5\030" +
    "\ufff5\055\ufff5\056\ufff5\001\002\000\062\002\uffed\010\014" +
    "\011\011\012\015\013\012\015\013\017\037\030\uffed\034" +
    "\044\035\053\042\072\043\065\044\040\045\050\046\063" +
    "\047\047\050\046\051\064\052\073\053\061\054\056\055" +
    "\uffed\056\uffed\057\074\001\002\000\010\027\364\034\u0103" +
    "\035\375\001\002\000\026\010\014\011\011\012\015\013" +
    "\012\015\013\017\037\023\uffd6\027\uffb6\034\uffb6\035\uffb6" +
    "\001\002\000\026\010\014\011\011\012\015\013\012\015" +
    "\013\017\037\023\uffd7\027\uffb7\034\uffb7\035\uffb7\001\002" +
    "\000\014\010\014\011\011\012\015\013\012\015\013\001" +
    "\002\000\004\036\u0105\001\002\000\010\027\364\034\u0103" +
    "\035\375\001\002\000\004\030\u0107\001\002\000\062\002" +
    "\uffed\010\014\011\011\012\015\013\012\015\013\017\037" +
    "\030\uffed\034\044\035\053\042\072\043\065\044\040\045" +
    "\050\046\063\047\047\050\046\051\064\052\073\053\061" +
    "\054\056\055\uffed\056\uffed\057\074\001\002\000\012\002" +
    "\ufff6\030\ufff6\055\ufff6\056\ufff6\001\002\000\024\005\077" +
    "\010\014\011\011\012\015\013\012\015\013\016\076\017" +
    "\103\024\105\001\002\000\066\002\uffed\010\014\011\011" +
    "\012\015\013\012\015\013\017\037\025\156\027\364\030" +
    "\uffed\034\365\035\370\042\072\043\065\044\040\045\050" +
    "\046\063\047\047\050\046\051\064\052\073\053\061\054" +
    "\056\055\uffed\056\uffed\057\074\001\002\000\012\002\uffce" +
    "\030\uffce\055\uffce\056\uffce\001\002\000\012\002\uffd0\030" +
    "\uffd0\055\uffd0\056\uffd0\001\002\000\006\020\uffc9\031\uffc9" +
    "\001\002\000\004\036\u010f\001\002\000\010\027\032\034" +
    "\033\035\031\001\002\000\012\002\ufff7\030\ufff7\055\ufff7" +
    "\056\ufff7\001\002\000\010\027\ufffb\034\ufffb\035\ufffb\001" +
    "\002\000\004\036\u0113\001\002\000\010\034\007\035\004" +
    "\047\005\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\002\005\001\001\000\010\030\u0111\031" +
    "\015\032\007\001\001\000\010\031\025\032\023\041\024" +
    "\001\001\000\002\001\001\000\010\030\016\031\015\032" +
    "\007\001\001\000\010\030\021\031\015\032\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\020\031\015" +
    "\032\007\001\001\000\004\002\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\025\032\023\041\u0110\001\001\000\004\003" +
    "\027\001\001\000\010\031\025\032\023\041\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\u010d\031" +
    "\015\032\007\001\001\000\042\006\051\007\050\010\065" +
    "\011\054\012\057\013\066\014\053\016\042\021\044\022" +
    "\041\024\061\031\070\032\067\042\040\043\035\045\056" +
    "\001\001\000\010\030\033\031\015\032\007\001\001\000" +
    "\004\003\034\001\001\000\002\001\001\000\022\023\361" +
    "\031\107\032\105\033\360\034\106\035\103\036\100\037" +
    "\101\001\001\000\002\001\001\000\010\031\201\032\177" +
    "\042\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\346\031\015\032\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\031\025\032" +
    "\023\041\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\276\031\015\032\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\201\032\177\042\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\070\032\067\042\222\043\224" +
    "\001\001\000\012\031\070\032\067\042\202\043\223\001" +
    "\001\000\010\031\201\032\177\042\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\107\032\105\033" +
    "\077\034\106\035\103\036\100\037\101\001\001\000\010" +
    "\031\163\032\162\044\164\001\001\000\020\031\107\032" +
    "\105\033\150\034\106\035\103\036\100\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\107\032\105\033\152\034\106\035\103\036\100" +
    "\037\101\001\001\000\002\001\001\000\020\031\107\032" +
    "\105\033\110\034\106\035\103\036\100\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\107\032\105\033\151\034\106" +
    "\035\103\036\100\037\101\001\001\000\020\031\107\032" +
    "\105\033\147\034\106\035\103\036\100\037\101\001\001" +
    "\000\020\031\107\032\105\033\143\034\106\035\103\036" +
    "\100\037\101\001\001\000\020\031\107\032\105\033\140" +
    "\034\106\035\103\036\100\037\101\001\001\000\020\031" +
    "\107\032\105\033\137\034\106\035\103\036\100\037\101" +
    "\001\001\000\020\031\107\032\105\033\135\034\106\035" +
    "\103\036\100\037\101\001\001\000\020\031\107\032\105" +
    "\033\134\034\106\035\103\036\100\037\101\001\001\000" +
    "\020\031\107\032\105\033\131\034\106\035\103\036\100" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\107\032\105\033\124\034\106\035\103\036\100" +
    "\037\101\001\001\000\002\001\001\000\020\031\107\032" +
    "\105\033\126\034\106\035\103\036\100\037\101\001\001" +
    "\000\002\001\001\000\020\031\107\032\105\033\130\034" +
    "\106\035\103\036\100\037\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\107\032\105\033\133\034" +
    "\106\035\103\036\100\037\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\107\032\105" +
    "\033\142\034\106\035\103\036\100\037\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\107\032\105" +
    "\033\145\034\106\035\103\036\100\037\101\001\001\000" +
    "\002\001\001\000\020\031\107\032\105\033\150\034\106" +
    "\035\103\036\100\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\157\007\050\010\065\011\054\012" +
    "\057\013\066\014\053\016\042\021\044\022\041\024\061" +
    "\025\156\031\070\032\067\042\040\043\035\045\056\001" +
    "\001\000\042\006\160\007\050\010\065\011\054\012\057" +
    "\013\066\014\053\016\042\021\044\022\041\024\061\031" +
    "\070\032\067\042\040\043\035\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\163\032\162\044\166\001\001\000\010" +
    "\031\163\032\162\044\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\170\007\050" +
    "\010\065\011\054\012\057\013\066\014\053\016\042\021" +
    "\044\022\041\024\061\031\070\032\067\042\040\043\035" +
    "\045\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\107\032\105\033\174\034\106" +
    "\035\103\036\100\037\101\001\001\000\002\001\001\000" +
    "\044\006\157\007\050\010\065\011\054\012\057\013\066" +
    "\014\053\016\042\021\044\022\041\024\061\025\176\031" +
    "\070\032\067\042\040\043\035\045\056\001\001\000\002" +
    "\001\001\000\010\031\201\032\177\042\222\001\001\000" +
    "\002\001\001\000\010\031\201\032\177\042\202\001\001" +
    "\000\002\001\001\000\022\026\205\031\107\032\105\033" +
    "\204\034\106\035\103\036\100\037\101\001\001\000\002" +
    "\001\001\000\044\006\157\007\050\010\065\011\054\012" +
    "\057\013\066\014\053\016\042\021\044\022\041\024\061" +
    "\025\221\031\070\032\067\042\040\043\035\045\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\027\214\031\163\032\162\044" +
    "\215\001\001\000\012\027\220\031\163\032\162\044\215" +
    "\001\001\000\002\001\001\000\012\027\216\031\163\032" +
    "\162\044\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\227\031\107\032\105\033\204\034\106\035\103\036" +
    "\100\037\101\001\001\000\044\006\157\007\050\010\065" +
    "\011\054\012\057\013\066\014\053\016\042\021\044\022" +
    "\041\024\061\025\230\031\070\032\067\042\040\043\035" +
    "\045\056\001\001\000\002\001\001\000\020\031\107\032" +
    "\105\033\232\034\106\035\103\036\100\037\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\235\007" +
    "\050\010\065\011\054\012\057\013\066\014\053\016\042" +
    "\021\044\022\041\024\061\031\070\032\067\042\040\043" +
    "\035\045\056\001\001\000\002\001\001\000\042\006\237" +
    "\007\050\010\065\011\054\012\057\013\066\014\053\016" +
    "\042\021\044\022\041\024\061\031\070\032\067\042\040" +
    "\043\035\045\056\001\001\000\002\001\001\000\042\006" +
    "\251\007\050\010\065\011\054\012\057\013\066\014\053" +
    "\016\042\021\044\022\041\024\061\031\070\032\067\042" +
    "\040\043\035\045\056\001\001\000\002\001\001\000\020" +
    "\031\107\032\105\033\243\034\106\035\103\036\100\037" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\246\007\050\010\065\011\054\012\057\013\066\014" +
    "\053\016\042\021\044\022\041\024\061\031\070\032\067" +
    "\042\040\043\035\045\056\001\001\000\002\001\001\000" +
    "\004\012\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\253\007\050\010\065\011\054\012\057\013" +
    "\066\014\053\016\042\021\044\022\041\024\061\031\070" +
    "\032\067\042\040\043\035\045\056\001\001\000\002\001" +
    "\001\000\004\020\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\006\266\007\050\010\065\011\054\012" +
    "\057\013\066\014\053\016\042\021\044\022\041\024\061" +
    "\031\070\032\067\042\040\043\035\045\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\006\271\007\050" +
    "\010\065\011\054\012\057\013\066\014\053\016\042\021" +
    "\044\022\041\024\061\031\070\032\067\042\040\043\035" +
    "\045\056\001\001\000\004\017\272\001\001\000\002\001" +
    "\001\000\042\006\274\007\050\010\065\011\054\012\057" +
    "\013\066\014\053\016\042\021\044\022\041\024\061\031" +
    "\070\032\067\042\040\043\035\045\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\006" +
    "\300\007\050\010\065\011\054\012\057\013\066\014\053" +
    "\016\042\021\044\022\041\024\061\031\070\032\067\042" +
    "\040\043\035\045\056\001\001\000\002\001\001\000\042" +
    "\006\302\007\050\010\065\011\054\012\057\013\066\014" +
    "\053\016\042\021\044\022\041\024\061\031\070\032\067" +
    "\042\040\043\035\045\056\001\001\000\002\001\001\000" +
    "\020\031\107\032\105\033\304\034\106\035\103\036\100" +
    "\037\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\307\007\050\010\065\011\054\012\057\013\066" +
    "\014\053\016\042\021\044\022\041\024\061\031\070\032" +
    "\067\042\040\043\035\045\056\001\001\000\002\001\001" +
    "\000\006\011\311\012\057\001\001\000\002\001\001\000" +
    "\004\003\313\001\001\000\002\001\001\000\012\015\321" +
    "\031\201\032\177\042\315\001\001\000\002\001\001\000" +
    "\010\031\201\032\177\042\341\001\001\000\010\031\201" +
    "\032\177\042\336\001\001\000\010\031\201\032\177\042" +
    "\333\001\001\000\002\001\001\000\020\031\107\032\105" +
    "\033\323\034\106\035\103\036\100\037\101\001\001\000" +
    "\002\001\001\000\020\031\107\032\105\033\325\034\106" +
    "\035\103\036\100\037\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\330\007\050\010\065\011\054" +
    "\012\057\013\066\014\053\016\042\021\044\022\041\024" +
    "\061\031\070\032\067\042\040\043\035\045\056\001\001" +
    "\000\002\001\001\000\042\006\332\007\050\010\065\011" +
    "\054\012\057\013\066\014\053\016\042\021\044\022\041" +
    "\024\061\031\070\032\067\042\040\043\035\045\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\335" +
    "\031\107\032\105\033\204\034\106\035\103\036\100\037" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\340\031\107\032\105\033\204\034\106\035\103\036" +
    "\100\037\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\343\031\107\032\105\033\204\034\106\035" +
    "\103\036\100\037\101\001\001\000\002\001\001\000\022" +
    "\026\345\031\107\032\105\033\204\034\106\035\103\036" +
    "\100\037\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\350\007\050\010\065\011\054\012\057\013" +
    "\066\014\053\016\042\021\044\022\041\024\061\031\070" +
    "\032\067\042\040\043\035\045\056\001\001\000\002\001" +
    "\001\000\022\026\352\031\107\032\105\033\204\034\106" +
    "\035\103\036\100\037\101\001\001\000\044\006\157\007" +
    "\050\010\065\011\054\012\057\013\066\014\053\016\042" +
    "\021\044\022\041\024\061\025\353\031\070\032\067\042" +
    "\040\043\035\045\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\026\356\031\107\032\105\033\204\034" +
    "\106\035\103\036\100\037\101\001\001\000\044\006\157" +
    "\007\050\010\065\011\054\012\057\013\066\014\053\016" +
    "\042\021\044\022\041\024\061\025\357\031\070\032\067" +
    "\042\040\043\035\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\365\006\157" +
    "\007\050\010\065\011\054\012\057\013\066\014\053\016" +
    "\042\021\044\022\041\024\061\025\366\031\070\032\067" +
    "\042\040\043\035\045\056\001\001\000\042\006\u0105\007" +
    "\050\010\065\011\054\012\057\013\066\014\053\016\042" +
    "\021\044\022\041\024\061\031\070\032\067\042\040\043" +
    "\035\045\056\001\001\000\010\030\373\031\015\032\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\370\031\015\032\007\001\001\000\002\001\001\000\044" +
    "\004\372\006\300\007\050\010\065\011\054\012\057\013" +
    "\066\014\053\016\042\021\044\022\041\024\061\031\070" +
    "\032\067\042\040\043\035\045\056\001\001\000\002\001" +
    "\001\000\004\004\375\001\001\000\010\030\u0103\031\015" +
    "\032\007\001\001\000\002\001\001\000\044\006\350\007" +
    "\050\010\065\011\054\012\057\013\066\014\053\016\042" +
    "\021\044\022\041\024\061\030\377\031\u0101\032\u0100\042" +
    "\040\043\035\045\056\001\001\000\004\004\375\001\001" +
    "\000\014\030\021\031\u0101\032\u0100\042\222\043\224\001" +
    "\001\000\014\030\020\031\u0101\032\u0100\042\202\043\223" +
    "\001\001\000\010\030\377\031\015\032\007\001\001\000" +
    "\002\001\001\000\004\004\372\001\001\000\002\001\001" +
    "\000\042\006\u0107\007\050\010\065\011\054\012\057\013" +
    "\066\014\053\016\042\021\044\022\041\024\061\031\070" +
    "\032\067\042\040\043\035\045\056\001\001\000\002\001" +
    "\001\000\022\023\u010c\031\107\032\105\033\360\034\106" +
    "\035\103\036\100\037\101\001\001\000\046\004\u010a\006" +
    "\157\007\050\010\065\011\054\012\057\013\066\014\053" +
    "\016\042\021\044\022\041\024\061\025\u010b\031\070\032" +
    "\067\042\040\043\035\045\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\u0113\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Erroe Sintactico en la linea "+s.left+" Columna "+s.right+". No se esperaba este componente: "+s.value+".");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sÃ­ntactico irrecuperable en la LÃ­nea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= CLASS InicioVar LlavesAp 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= COMENTARIOS Comentario Inicio 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicio ::= COMENINICIAL Comentario COMENFINAL Inicio 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Otro ::= CLASS InicioVar LlavesAp 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Otro",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicioVar ::= Alfabeto InicioVar 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InicioVar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicioVar ::= Numero InicioVar 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InicioVar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicioVar ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InicioVar",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LlavesAp ::= LLAVE1 Instruccion LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesAp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LlavesAp ::= COMENTARIOS Comentario LlavesAp 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesAp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LlavesAp ::= COMENINICIAL Comentario COMENFINAL LlavesAp 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesAp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LlavesMet ::= LLAVE1 Instruccion LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesMet",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LlavesMet ::= COMENTARIOS Comentario LlavesMet 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesMet",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LlavesMet ::= COMENINICIAL Comentario COMENFINAL LlavesMet 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LlavesMet",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruccion ::= PalabrasReservadas 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruccion ::= Metodos 
            {
              Object RESULT =null;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruccion ::= Sentencias 
            {
              Object RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruccion ::= Llamada 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruccion ::= Consola 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruccion ::= Otro 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruccion ::= 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruccion ::= BREAK PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruccion ::= COMENTARIOS Comentario COMENTARIOS Instruccion 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruccion ::= COMENINICIAL Comentario COMENFINAL Instruccion 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Consola ::= CONSOLE PAR1 Operaciones PAR2 FinalLinea 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Consola",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencias ::= SentenciaIfElse 
            {
              Object RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencias ::= SentenciaFor 
            {
              Object RESULT =null;
		int sfoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sfo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Sentencias ::= SentenciaWhile 
            {
              Object RESULT =null;
		int sewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sewright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sew = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Sentencias ::= SentenciaSwitch 
            {
              Object RESULT =null;
		int sswleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sswright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ssw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencias",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SentenciaIfElse ::= IF PAR1 Operaciones PAR2 LLAVE1 Instruccion LLAVE2 SentenciaIfElse 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaIfElse",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SentenciaIfElse ::= IfElseIf 
            {
              Object RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaIfElse",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IfElseIf ::= ELSE LLAVE1 Instruccion LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfElseIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IfElseIf ::= ELSE IF PAR1 Operaciones PAR2 LLAVE1 Instruccion LLAVE2 IfElseIf 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfElseIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SentenciaFor ::= FOR PAR1 Comando PUNTOYCOMA Operaciones PUNTOYCOMA Operaciones PAR2 LLAVE1 Instruccion LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SentenciaWhile ::= WHILE PAR1 Operaciones PAR2 LLAVE1 Instruccion LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SentenciaWhile ::= DO LLAVE1 Instruccion LLAVE2 WHILE PAR1 Operaciones PAR2 FinalLinea 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Comando ::= VAR VarCaracter IGUAL Caracter 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Comando ::= LET VarCaracter IGUAL Caracter 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Comando ::= CONST VarCaracter IGUAL Caracter 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Comando ::= VarCaracter IGUAL Caracter 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarCaracter ::= Alfabeto VarCaracter 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = str + var.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarCaracter",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarCaracter ::= Numero VarCaracter 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = num + var.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarCaracter",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarCaracter ::= Alfabeto 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = str;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarCaracter",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarCaracter ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = num;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarCaracter",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SentenciaSwitch ::= SWITCH PAR1 Elegir PAR2 LLAVE1 Casos LLAVE2 Instruccion 
            {
              Object RESULT =null;
		int eleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ele = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ns = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentenciaSwitch",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Casos ::= CASE ENTEROS DOSPUNTOS Instruccion Casos 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int casleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int casright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Casos ::= DEFAULT DOSPUNTOS Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Casos",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Elegir ::= ENTEROS 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elegir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Elegir ::= LETRAS 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String let = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elegir",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Llamada ::= MetodosVar Variables PAR2 FinalLinea 
            {
              Object RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Llamada ::= MetodosVar PAR2 FinalLinea 
            {
              Object RESULT =null;
		int mrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Llamada",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Metodos ::= MetodosVar Variables PAR2 LlavesMet 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Metodos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Metodos ::= MetodosVar PAR2 LlavesMet 
            {
              Object RESULT =null;
		int mvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Metodos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MetodosVar ::= Alfabeto MetodosVar 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodosVar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MetodosVar ::= Numero MetodosVar 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodosVar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MetodosVar ::= PAR1 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MetodosVar",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Variables ::= Variables COMA Variables 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Variables ::= Operaciones 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VariablesVar ::= Alfabeto VariablesVar 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariablesVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VariablesVar ::= Numero VariablesVar 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object met = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariablesVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VariablesVar ::= CADENAS 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariablesVar",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PalabrasReservadas ::= VAR VarCaracter IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                                                 Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PalabrasReservadas ::= LET VarCaracter IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                                                  Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PalabrasReservadas ::= CONST VarCaracter IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                                                  Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PalabrasReservadas ::= VarCaracter IGUAL Caracter FinalLinea 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Variable1 variables = new Variable1(var.toString());
                                                                                 Interfaz_Grafica.var1.add(variables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PalabrasReservadas",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FinalLinea ::= PUNTOYCOMA Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FinalLinea",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FinalLinea ::= Instruccion 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FinalLinea",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Caracter ::= Operaciones 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Caracter ::= REQUIRE PAR1 CADENAS PUNTO PUNTO Direccion2 PAR2 
            {
              Object RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String req = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pa1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pa1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pa2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pa2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Caracter",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Direccion2 ::= VariablesVar 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Direccion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Direccion2 ::= VariablesVar Direccion2 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Direccion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Direccion2 ::= DIVIDIDO Direccion2 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Direccion2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Comentario ::= Alfabeto Comentario 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Comentario ::= Numero Comentario 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Comentario ::= Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Comentario ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comentario",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Alfabeto ::= LETRAS 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String let = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String(let);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alfabeto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Alfabeto ::= ENTEROS2 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(ent);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alfabeto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Alfabeto ::= COMBINACION 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String(com);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Alfabeto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Numero ::= ENTEROS 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(ent);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Numero ::= DECIMALES 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Double(dec);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Numero",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Operaciones ::= Expresiones 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Operaciones ::= Logicos 
            {
              Object RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object log = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Operaciones ::= Relacionales 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Operaciones ::= Numero 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Operaciones ::= Alfabeto 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Operaciones ::= CADENAS VariablesVar 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Operaciones ::= VariableGlobal 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Operaciones ::= PAR1 Operaciones PAR2 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expresiones ::= Operaciones MAS Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expresiones ::= Operaciones MENOS Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expresiones ::= Operaciones POR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expresiones ::= Operaciones DIVIDIDO Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expresiones ::= Operaciones POR POR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expresiones ::= Operaciones PORCENTAJE Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expresiones ::= Operaciones MAS MAS 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expresiones ::= Operaciones MENOS MENOS 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expresiones ::= MENOS Operaciones 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresiones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Logicos ::= Operaciones AND Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logicos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Logicos ::= Operaciones OR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logicos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Logicos ::= NOT Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Logicos",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Relacionales ::= Operaciones IGUAL IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Relacionales ::= Operaciones NOT IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Relacionales ::= Operaciones MENOR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Relacionales ::= Operaciones MAYOR Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Relacionales ::= Operaciones MENOR IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Relacionales ::= Operaciones MAYOR IGUAL Operaciones 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Relacionales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
