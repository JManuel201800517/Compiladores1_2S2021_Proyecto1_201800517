package analizadores;
import java_cup.runtime.*;
import proyecto.pkg1.pkg_.analizador.de.copias.*;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Erroe Sintactico en la linea "+s.left+" Columna "+s.right+". No se esperaba este componente: "+s.value+".");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sÃ­ntactico irrecuperable en la LÃ­nea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 
:}

terminal String MAS, MENOS, POR, DIVIDIDO;
terminal String ENTEROS, ENTEROS2, DECIMALES, LETRAS, LETRAS2, COMBINACION, CADENAS;
terminal String PAR1, PAR2;
terminal String MENOR, MAYOR, IGUAL, NOT;
terminal String PUNTOYCOMA, DOSPUNTOS;
terminal String LLAVE1, LLAVE2;
terminal String COMA, PUNTO, COMILLA;
terminal String COMENTARIOS, COMENINICIAL, COMENFINAL;
terminal String AND, OR, PORCENTAJE;

terminal String VAR, LET, CONST;
terminal String IF, ELSE;
terminal String CLASS;
terminal String FOR;
terminal String WHILE, DO;
terminal String SWITCH, BREAK, DEFAULT, CASE;
terminal String CONSOLE, REQUIRE;



non terminal Inicio;
non terminal LlavesAp;
non terminal LlavesMet;
non terminal Opcion;
non terminal Instruccion;
non terminal Consola;
non terminal Sentencias;
non terminal SentenciaIfElse;
non terminal IfElseIf;
non terminal SentenciaFor;
non terminal SentenciaWhile;
non terminal Comando;
non terminal SentenciaSwitch;
non terminal Casos;
non terminal Elegir;
non terminal Llamada;
non terminal Metodos;
non terminal Variables;
non terminal PalabrasReservadas;
non terminal FinalLinea;
non terminal Caracter;
non terminal Direccion2;
non terminal Comentario;
non terminal Alfabeto;
non terminal Numero;
non terminal Operaciones;
non terminal Expresiones;
non terminal Logicos;
non terminal Relacionales;
non terminal VariableGlobal;
non terminal MetodoReservado;
non terminal InicioVar;
non terminal VarCaracter;
non terminal MetodosVar;
non terminal VariablesVar;
non terminal Otro;


precedence left MAS, MENOS;
precedence left POR, DIVIDIDO;
precedence left MAYOR, MENOR, IGUAL;
precedence left AND, OR, PORCENTAJE;
precedence left COMA;
precedence right NOT;
precedence left MAYOR, MENOR, IGUAL;
precedence right IF;
precedence right ELSE;
precedence right WHILE;

start with Inicio;


Inicio ::= CLASS InicioVar LlavesAp:enc                          {::}
        |  COMENTARIOS Comentario:com Inicio:inic                   {::}
        |  COMENINICIAL Comentario:com COMENFINAL Inicio:inic       {::}
;

Otro ::= CLASS InicioVar LlavesAp:enc                    {::};

InicioVar ::= Alfabeto:alf InicioVar:var      {::}
            | Numero:num    InicioVar:var    {::}
            |                  {::}
;


LlavesAp ::= LLAVE1 Instruccion:ins LLAVE2 Instruccion:ins2  {::}
          |  COMENTARIOS Comentario:com LlavesAp:inic                                     {::}
          |  COMENINICIAL Comentario:com COMENFINAL LlavesAp:inic                         {::}
;


LlavesMet ::= LLAVE1 Instruccion:ins  LLAVE2 Instruccion:ins2 {::}
          |  COMENTARIOS Comentario:com LlavesMet:inic                                     {::}
          |  COMENINICIAL Comentario:com COMENFINAL LlavesMet:inic                         {::};





Instruccion ::= PalabrasReservadas:res    {::}
              | Metodos:met                   {::}
              | Sentencias:sen            {::}
              | Llamada:da                {::}
              | Consola:con               {::}
              | Otro:ini                    {::}
              |               {::}
              | BREAK PUNTOYCOMA          {::}
              | COMENTARIOS Comentario:com COMENTARIOS Instruccion:ins          {::}
              | COMENINICIAL Comentario:com COMENFINAL Instruccion:ins                         {::}
; 


Consola ::= CONSOLE PAR1 Operaciones:op PAR2 FinalLinea:fin   {::};


Sentencias ::= SentenciaIfElse:sif             {::}
             | SentenciaFor:sfo                 {::}
             | SentenciaWhile:sew               {::}
             | SentenciaSwitch:ssw              {::}
;


SentenciaIfElse ::= IF PAR1 Operaciones:op PAR2 LLAVE1 Instruccion:ins LLAVE2 SentenciaIfElse:sen    {::}
                   | IfElseIf:elif                                                              {::}
;


IfElseIf ::= ELSE LLAVE1 Instruccion:ins  LLAVE2 Instruccion:ins2                                            {::}
           | ELSE IF PAR1 Operaciones:op PAR2 LLAVE1 Instruccion:ins LLAVE2  IfElseIf:elif     {::}                                   
;


SentenciaFor ::= FOR PAR1 Comando:com PUNTOYCOMA Operaciones:res PUNTOYCOMA Operaciones:exp PAR2 LLAVE1 Instruccion:ins  LLAVE2 Instruccion:ins2 {::};


SentenciaWhile ::= WHILE PAR1 Operaciones:op PAR2 LLAVE1 Instruccion:ins   LLAVE2 Instruccion:ins2                {::}
                 | DO LLAVE1 Instruccion:ins LLAVE2 WHILE PAR1 Operaciones:op PAR2 FinalLinea:fin   {::}
;


Comando ::= VAR VarCaracter:var  IGUAL Caracter:car    {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
          | LET VarCaracter:var    IGUAL Caracter:car   {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
          | CONST VarCaracter:var  IGUAL Caracter:car   {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
          | VarCaracter:var     IGUAL Caracter:car {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
;

VarCaracter ::= Alfabeto:str VarCaracter:var {:RESULT = str + var.toString();:}
               | Numero:num VarCaracter:var  {:RESULT = num + var.toString();:}
               |  Alfabeto:str                   {:RESULT = str;:}
               |  Numero:num               {:RESULT = num;:}
;


SentenciaSwitch ::= SWITCH PAR1 Elegir:ele PAR2 LLAVE1 Casos:cas   LLAVE2 Instruccion:ns     {::};


Casos ::= CASE ENTEROS:ent DOSPUNTOS Instruccion:ins Casos:cas      {::}
        | DEFAULT DOSPUNTOS Instruccion:ins                        {::}
;


Elegir ::= ENTEROS:ent        {::}
         | LETRAS:let  {::}
;


Llamada ::= MetodosVar:mr  Variables:var PAR2 FinalLinea:fin        {::}
          | MetodosVar:mr PAR2 FinalLinea:fin                      {::}
;


Metodos ::= MetodosVar:mv Variables:var PAR2 LlavesMet:met        {::}
          | MetodosVar:mv PAR2 LlavesMet:met                      {::}
;

MetodosVar ::= Alfabeto:alf MetodosVar:met     {::}
             | Numero:num     MetodosVar:met   {::}
             | PAR1         {::}
;


Variables ::= Variables:pr COMA Variables:sg     {::}
            | Operaciones:vg                      {::}
;

VariablesVar ::= Alfabeto:alf  VariablesVar:met     {::}
             | Numero:num     VariablesVar:met   {::}
             | CADENAS:cad       {::}
;


PalabrasReservadas ::= VAR VarCaracter:var IGUAL Caracter:car  FinalLinea:fin   {:Variable1 variables = new Variable1(var.toString());
                                                                                 Interfaz_Grafica.var1.add(variables);:}
                     | LET VarCaracter:var IGUAL Caracter:car  FinalLinea:fin   {:Variable1 variables = new Variable1(var.toString());
                                                                                  Interfaz_Grafica.var1.add(variables);:}
                     | CONST VarCaracter:var IGUAL Caracter:car  FinalLinea:fin {:Variable1 variables = new Variable1(var.toString());
                                                                                  Interfaz_Grafica.var1.add(variables);:}
                     | VarCaracter:var  IGUAL Caracter:car  FinalLinea:fin  {:Variable1 variables = new Variable1(var.toString());
                                                                                 Interfaz_Grafica.var1.add(variables);:}
                     
;


FinalLinea ::= PUNTOYCOMA Instruccion:ins    {::}
             | Instruccion:ins               {::}
;


Caracter ::=  Operaciones:exp              {::}
           | REQUIRE:req PAR1:pa1 CADENAS:cad PUNTO:p1 PUNTO:p2 Direccion2:dic2  PAR2:pa2 {::}
;



Direccion2 ::= VariablesVar:alf                      {::}
             | VariablesVar:alf Direccion2:dic2      {::}
             | DIVIDIDO:div Direccion2:dic2          {::} 
;



Comentario ::= Alfabeto:alf Comentario:com       {::}
             | Numero:num Comentario:com         {::}
             |  Alfabeto:alf                     {::}
             | Numero:num                        {::}
;


Alfabeto ::= LETRAS:let        {:RESULT = new String(let);:}
           | ENTEROS2:ent       {:RESULT = new Integer(ent);:}
           | COMBINACION:com   {:RESULT = new String(com);:}
;


Numero ::= ENTEROS:ent        {:RESULT = new Integer(ent);:}
         | DECIMALES:dec      {:RESULT = new Double(dec);:}
;


Operaciones ::= Expresiones:exp  {::}
              | Logicos:log      {::}
              | Relacionales:res {::}
              | Numero:exp1      {::}
               | Alfabeto:exp1     {::}
              | CADENAS VariablesVar:var       {::}
              | VariableGlobal:vg                  {::}
              | PAR1 Operaciones:op PAR2                                {::}
;


Expresiones ::= Operaciones:op1 MAS Operaciones:op2         {::}
              | Operaciones:op1 MENOS Operaciones:op2       {::}
              | Operaciones:op1 POR Operaciones:op2         {::}
              | Operaciones:op1 DIVIDIDO Operaciones:op2   {::}
              | Operaciones:op1 POR POR Operaciones:op2     {::}
              | Operaciones:op1 PORCENTAJE Operaciones:op2  {::}
              | Operaciones:op1 MAS MAS                      {::}
              | Operaciones:op1 MENOS MENOS                  {::}
              | MENOS Operaciones:op                       {::}
;


Logicos ::= Operaciones:op1 AND Operaciones:op2        {::}
          | Operaciones:op1 OR Operaciones:op2         {::}
          | NOT Operaciones:op1                    {::}
;


Relacionales ::= Operaciones:op1 IGUAL IGUAL Operaciones:op2         {::}
               | Operaciones:op1 NOT IGUAL Operaciones:op2           {::}
               | Operaciones:op1 MENOR Operaciones:op2               {::}
               | Operaciones:op1 MAYOR Operaciones:op2               {::}
               | Operaciones:op1 MENOR IGUAL Operaciones:op2         {::}
               | Operaciones:op1 MAYOR IGUAL Operaciones:op2         {::}
;