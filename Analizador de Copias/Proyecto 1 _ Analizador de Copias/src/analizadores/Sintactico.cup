package analizadores;
import java_cup.runtime.*;
import proyecto.pkg1.pkg_.analizador.de.copias.*;

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Erroe Sintactico en la linea "+s.left+" Columna "+s.right+". No se esperaba este componente: "+s.value+".");
        error nuevoerror = new error("Error sintactico: no se esperaba este componente", s.value.toString(), s.left, s.right, Interfaz_Grafica.textArea4.getText());
        Interfaz_Grafica.listalexicos.add(nuevoerror);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sÃ­ntactico irrecuperable en la LÃ­nea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 
:}

terminal String MAS, MENOS, POR, DIVIDIDO;
terminal String ENTEROS, ENTEROS2, DECIMALES, LETRAS, LETRAS2, COMBINACION, CADENAS;
terminal String PAR1, PAR2;
terminal String MENOR, MAYOR, IGUAL, NOT;
terminal String PUNTOYCOMA, DOSPUNTOS;
terminal String LLAVE1, LLAVE2;
terminal String COMA, PUNTO, COMILLA;
terminal String COMENTARIOS, COMENINICIAL, COMENFINAL;
terminal String AND, OR, PORCENTAJE;

terminal String VAR, LET, CONST;
terminal String IF, ELSE;
terminal String CLASS;
terminal String FOR;
terminal String WHILE, DO;
terminal String SWITCH, BREAK, DEFAULT, CASE;
terminal String CONSOLE, REQUIRE;



non terminal Inicio;
non terminal LlavesAp;
non terminal LlavesMet;
non terminal Opcion;
non terminal Instruccion;
non terminal Consola;
non terminal Sentencias;
non terminal SentenciaIfElse;
non terminal IfElseIf;
non terminal SentenciaFor;
non terminal SentenciaWhile;
non terminal Comando;
non terminal SentenciaSwitch;
non terminal Casos;
non terminal Elegir;
non terminal Llamada;
non terminal Metodos;
non terminal Variables;
non terminal PalabrasReservadas;
non terminal FinalLinea;
non terminal Caracter;
non terminal Direccion2;
non terminal Comentario;
non terminal Alfabeto;
non terminal Numero;
non terminal Operaciones;
non terminal Expresiones;
non terminal Logicos;
non terminal Relacionales;
non terminal VariableGlobal;
non terminal MetodoReservado;
non terminal InicioVar;
non terminal VarCaracter;
non terminal MetodosVar;
non terminal VariablesVar;
non terminal Otro;


precedence left MAS, MENOS;
precedence left POR, DIVIDIDO;
precedence left MAYOR, MENOR, IGUAL;
precedence left AND, OR, PORCENTAJE;
precedence left COMA;
precedence right NOT;
precedence left MAYOR, MENOR, IGUAL;
precedence right IF;
precedence right ELSE;
precedence right WHILE;

start with Inicio;


Inicio ::= CLASS InicioVar:ini LlavesAp:enc                          {:Clase1 clase = new Clase1(ini.toString(), "30", Interfaz_Grafica.meto1);
                                                                                 Interfaz_Grafica.clas1.add(clase);:}
        |  COMENTARIOS Comentario:com Inicio:inic                   {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                 Interfaz_Grafica.coment1.add(comentario);:}
        |  COMENINICIAL Comentario:com COMENFINAL Inicio:inic       {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                 Interfaz_Grafica.coment1.add(comentario);:}
;

Otro ::= CLASS InicioVar:ini LlavesAp:enc                    {:Clase1 clase = new Clase1(ini.toString(), "30", Interfaz_Grafica.meto1);
                                                                                 Interfaz_Grafica.clas1.add(clase);:};

InicioVar ::= Alfabeto:alf InicioVar:var      {:RESULT = alf + var.toString();:}
            | Numero:num    InicioVar:var    {:RESULT = num + var.toString();:}
            |  Alfabeto:alf                {:RESULT = alf;:}
            | Numero:num         {:RESULT = num;:}
;


LlavesAp ::= LLAVE1 Instruccion:ins LLAVE2 Instruccion:ins2  {::}
          |  COMENTARIOS Comentario:com LlavesAp:inic                                     {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                           Interfaz_Grafica.coment1.add(comentario);:}
          |  COMENINICIAL Comentario:com COMENFINAL LlavesAp:inic                         {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                           Interfaz_Grafica.coment1.add(comentario);:}
;


LlavesMet ::= LLAVE1 Instruccion:ins  LLAVE2 Instruccion:ins2 {::}
          |  COMENTARIOS Comentario:com LlavesMet:inic                                     {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                            Interfaz_Grafica.coment1.add(comentario);:}
          |  COMENINICIAL Comentario:com COMENFINAL LlavesMet:inic                         {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                            Interfaz_Grafica.coment1.add(comentario);:};





Instruccion ::= PalabrasReservadas:res    {::}
              | Metodos:met                   {::}
              | Sentencias:sen            {::}
              | Llamada:da                {::}
              | Consola:con               {::}
              | Otro:ini                    {::}
              |               {::}
              | BREAK PUNTOYCOMA          {::}
              | COMENTARIOS Comentario:com COMENTARIOS Instruccion:ins          {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                 Interfaz_Grafica.coment1.add(comentario);:}
              | COMENINICIAL Comentario:com COMENFINAL Instruccion:ins          {:Comentario1 comentario = new Comentario1(com.toString());
                                                                                 Interfaz_Grafica.coment1.add(comentario);:}
; 


Consola ::= CONSOLE PAR1 Operaciones:op PAR2 FinalLinea:fin   {::};


Sentencias ::= SentenciaIfElse:sif             {::}
             | SentenciaFor:sfo                 {::}
             | SentenciaWhile:sew               {::}
             | SentenciaSwitch:ssw              {::}
;


SentenciaIfElse ::= IF PAR1 Operaciones:op PAR2 LLAVE1 Instruccion:ins LLAVE2 SentenciaIfElse:sen    {::}
                   | IfElseIf:elif                                                              {::}
;


IfElseIf ::= ELSE LLAVE1 Instruccion:ins  LLAVE2 Instruccion:ins2                                            {::}
           | ELSE IF PAR1 Operaciones:op PAR2 LLAVE1 Instruccion:ins LLAVE2  IfElseIf:elif     {::}                                   
;


SentenciaFor ::= FOR PAR1 Comando:com PUNTOYCOMA Operaciones:res PUNTOYCOMA Operaciones:exp PAR2 LLAVE1 Instruccion:ins  LLAVE2 Instruccion:ins2 {::};


SentenciaWhile ::= WHILE PAR1 Operaciones:op PAR2 LLAVE1 Instruccion:ins   LLAVE2 Instruccion:ins2                {::}
                 | DO LLAVE1 Instruccion:ins LLAVE2 WHILE PAR1 Operaciones:op PAR2 FinalLinea:fin   {::}
;


Comando ::= VAR VarCaracter:var  IGUAL Caracter:car    {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
          | LET VarCaracter:var    IGUAL Caracter:car   {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
          | CONST VarCaracter:var  IGUAL Caracter:car   {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
          | VarCaracter:var     IGUAL Caracter:car {:Variable1 variables = new Variable1(var.toString());
                                                          Interfaz_Grafica.var1.add(variables);:}
;

VarCaracter ::= Alfabeto:str VarCaracter:var {:RESULT = str + var.toString();:}
               | Numero:num VarCaracter:var  {:RESULT = num + var.toString();:}
               |  Alfabeto:str                   {:RESULT = str;:}
               |  Numero:num               {:RESULT = num;:}
;


SentenciaSwitch ::= SWITCH PAR1 Elegir:ele PAR2 LLAVE1 Casos:cas   LLAVE2 Instruccion:ns     {::};


Casos ::= CASE ENTEROS:ent DOSPUNTOS Instruccion:ins Casos:cas      {::}
        | DEFAULT DOSPUNTOS Instruccion:ins                        {::}
;


Elegir ::= ENTEROS:ent        {::}
         | LETRAS:let  {::}
;


Llamada ::= MetodosVar:mr PAR1 Variables:var PAR2 FinalLinea:fin        {::}
          | MetodosVar:mr PAR1 PAR2 FinalLinea:fin                      {::}
;


Metodos ::= MetodosVar:mv PAR1 Variables:var PAR2 LlavesMet:met        {:Metodo1 meto = new Metodo1(mv.toString(), "2", Interfaz_Grafica.para1 );
                                                                         Interfaz_Grafica.meto1.add(meto);:}
          | MetodosVar:mv PAR1 PAR2 LlavesMet:met                      {:Metodo1 meto = new Metodo1(mv.toString(), "2", Interfaz_Grafica.para1 );
                                                                         Interfaz_Grafica.meto1.add(meto);:}
;

MetodosVar ::= Alfabeto:alf MetodosVar:met     {:RESULT = alf + met.toString();:}
             | Numero:num     MetodosVar:met   {:RESULT = num + met.toString();:}
             |    Alfabeto:alf      {:RESULT = alf;:}
             | Numero:num       {:RESULT=num;:}
;


Variables ::= Variables:pr COMA:co Variables:sg     {: RESULT = pr.toString() + co + sg.toString();:}
            | Operaciones:vg                      {: RESULT = vg;
                                                          Parametro1 para = new Parametro1(vg.toString());
                                                          Interfaz_Grafica.para1.add(para);:} 
;

VariablesVar ::= Alfabeto:alf  VariablesVar:met     {::}
             | Numero:num     VariablesVar:met   {::}
             | CADENAS:cad       {::}
;


PalabrasReservadas ::= VAR VarCaracter:var IGUAL Caracter:car  FinalLinea:fin   {:Variable1 variables = new Variable1(var.toString());
                                                                                 Interfaz_Grafica.var1.add(variables);:}
                     | LET VarCaracter:var IGUAL Caracter:car  FinalLinea:fin   {:Variable1 variables = new Variable1(var.toString());
                                                                                  Interfaz_Grafica.var1.add(variables);:}
                     | CONST VarCaracter:var IGUAL Caracter:car  FinalLinea:fin {:Variable1 variables = new Variable1(var.toString());
                                                                                  Interfaz_Grafica.var1.add(variables);:}
                     | VarCaracter:var  IGUAL Caracter:car  FinalLinea:fin  {:Variable1 variables = new Variable1(var.toString());
                                                                                 Interfaz_Grafica.var1.add(variables);:}
                     
;


FinalLinea ::= PUNTOYCOMA Instruccion:ins    {::}
             | Instruccion:ins               {::}
;


Caracter ::=  Operaciones:exp              {::}
           | REQUIRE:req PAR1:pa1 CADENAS:cad PUNTO:p1 PUNTO:p2 Direccion2:dic2  PAR2:pa2 {::}
;



Direccion2 ::= VariablesVar:alf                      {::}
             | VariablesVar:alf Direccion2:dic2      {::}
             | DIVIDIDO:div Direccion2:dic2          {::} 
;



Comentario ::= Alfabeto:alf Comentario:com       {:RESULT = alf + com.toString();:}
             | Numero:num Comentario:com         {:RESULT = num + com.toString();:}
             |  Alfabeto:alf                     {:RESULT = alf;:}
             | Numero:num                        {:RESULT = num;:}
;


Alfabeto ::= LETRAS:let        {:RESULT = new String(let);:}
           | ENTEROS2:ent       {:RESULT = new Integer(ent);:}
           | COMBINACION:com   {:RESULT = new String(com);:}
;


Numero ::= ENTEROS:ent        {:RESULT = new Integer(ent);:}
         | DECIMALES:dec      {:RESULT = new Double(dec);:}
;


Operaciones ::= Expresiones:exp  {:RESULT = exp;:}
              | Logicos:log      {:RESULT = log;:}
              | Relacionales:res {:RESULT = res;:}
              | Numero:exp1      {:RESULT = exp1;:}
               | Alfabeto:exp1     {:RESULT = exp1;:}
              | CADENAS:cad VariablesVar:var       {:RESULT = cad+var;:}
              | PAR1:p1 Operaciones:op PAR2:p2                                {:RESULT = p1 + op.toString() + p2;:}
;


Expresiones ::= Operaciones:op1 MAS:m Operaciones:op2         {:RESULT = op1 + m + op2;:}
              | Operaciones:op1 MENOS:m Operaciones:op2       {:RESULT = op1 + m + op2;:}
              | Operaciones:op1 POR:m Operaciones:op2         {:RESULT = op1 + m + op2;:}
              | Operaciones:op1 DIVIDIDO:m Operaciones:op2   {:RESULT = op1 + m + op2;:}
              | Operaciones:op1 POR:m POR:n Operaciones:op2     {:RESULT = op1 + m + n + op2;:}
              | Operaciones:op1 PORCENTAJE:m Operaciones:op2  {:RESULT = op1 + m + op2;:}
              | Operaciones:op1 MAS:m MAS:n                      {:RESULT = op1 + m + n;:}
              | Operaciones:op1 MENOS:m MENOS:n                  {:RESULT = op1 + m + n;:}
              | MENOS:m Operaciones:op                       {:RESULT = m + op;:}
;


Logicos ::= Operaciones:op1 AND:m Operaciones:op2        {:RESULT = op1 + m + op2;:}
          | Operaciones:op1 OR:m Operaciones:op2         {:RESULT = op1 + m + op2;:}
          | NOT:m Operaciones:op1                    {:RESULT = m + op1;:}
;


Relacionales ::= Operaciones:op1 IGUAL:m IGUAL:n Operaciones:op2         {:RESULT = op1 + m + n + op2;:}
               | Operaciones:op1 NOT:m IGUAL:n Operaciones:op2           {:RESULT = op1 + m + n+ op2;:}
               | Operaciones:op1 MENOR:m Operaciones:op2               {:RESULT = op1 + m + op2;:}
               | Operaciones:op1 MAYOR:m Operaciones:op2               {:RESULT = op1 + m + op2;:}
               | Operaciones:op1 MENOR:m IGUAL:n Operaciones:op2         {:RESULT = op1 + m + n + op2;:}
               | Operaciones:op1 MAYOR:m IGUAL:n Operaciones:op2         {:RESULT = op1 + m + n + op2;:}
;