// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/analizadores2/Lexico.jflex

package analizadores2;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class lexico2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\12\17\1\20\1\21"+
    "\1\0\1\22\3\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\14\1\35\1\36"+
    "\1\37\1\40\1\41\1\14\1\42\1\43\1\44\1\45"+
    "\1\46\1\14\1\47\1\50\1\14\1\51\1\0\1\52"+
    "\1\0\1\14\1\0\1\53\1\24\1\54\1\55\1\56"+
    "\1\30\1\31\1\32\1\57\1\34\1\14\1\60\1\61"+
    "\1\62\1\63\1\41\1\14\1\64\1\65\1\66\1\45"+
    "\1\46\1\14\1\47\1\50\1\14\1\67\1\70\1\71"+
    "\7\0\1\3\113\0\1\14\37\0\1\14\76\0\2\72"+
    "\115\0\1\73\u019c\0\1\4\13\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\12\1\21\2\12\1\21\6\12"+
    "\1\22\1\23\1\12\1\21\4\12\1\24\1\25\1\26"+
    "\1\1\1\27\1\30\1\31\1\32\22\12\1\0\1\12"+
    "\1\0\20\12\1\0\1\12\1\0\3\12\1\0\1\12"+
    "\1\33\7\12\1\0\1\12\1\0\2\12\1\0\2\12"+
    "\1\0\5\12\1\0\3\12\1\0\1\12\1\0\2\12"+
    "\1\0\2\12\1\0\1\34\4\12\1\0\1\12\2\35"+
    "\2\36\1\12\2\37\1\40\1\12\1\0\3\41\2\12"+
    "\1\0\1\12\1\42\1\43\1\42\1\43\2\44\1\12"+
    "\1\0\4\12\3\0\3\12\1\0\3\12\1\0\1\12"+
    "\2\0\1\12\1\0\2\12\1\0\3\12\1\0\2\45"+
    "\1\0\1\12\1\0\2\12\1\0\3\12\2\0\1\12"+
    "\1\0\2\12\1\0\3\12\2\0\1\12\1\0\2\12"+
    "\1\0\1\12\2\46\2\47\1\12\1\0\2\12\1\0"+
    "\2\12\1\0\1\50\2\51\2\12\1\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\2\52\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\0\2\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\74\0\264\0\74\0\74"+
    "\0\74\0\74\0\360\0\74\0\u012c\0\74\0\74\0\u0168"+
    "\0\74\0\74\0\74\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u012c"+
    "\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\74\0\74"+
    "\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\74\0\u0564"+
    "\0\74\0\u05a0\0\74\0\74\0\74\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u012c\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u012c\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u012c\0\74\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u012c\0\74\0\u012c\0\u1ab8\0\u1af4\0\u02d0"+
    "\0\u012c\0\74\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u012c\0\u012c"+
    "\0\74\0\74\0\u012c\0\74\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274"+
    "\0\u22b0\0\u012c\0\74\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u012c\0\74"+
    "\0\u012c\0\74\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u012c\0\u012c\0\74\0\u2b20\0\u2b5c\0\u2b98"+
    "\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u012c\0\74"+
    "\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u012c\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\15\1\25\1\26\1\27"+
    "\1\30\1\31\1\15\1\32\1\15\4\32\1\33\1\32"+
    "\1\34\1\35\1\15\1\36\2\15\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\6\15\1\45\1\46\1\47\1\50"+
    "\1\51\1\2\1\52\75\0\1\3\77\0\1\53\4\0"+
    "\1\54\66\0\1\55\102\0\1\15\6\0\26\15\2\0"+
    "\14\15\22\0\1\56\1\0\1\20\70\0\1\15\6\0"+
    "\1\32\1\15\3\32\3\15\1\32\1\15\4\32\1\15"+
    "\1\57\2\32\4\15\2\0\11\15\1\60\2\15\1\0"+
    "\1\50\17\0\1\15\6\0\1\32\1\15\3\32\3\15"+
    "\1\32\1\15\3\32\1\61\1\15\3\32\4\15\2\0"+
    "\10\15\1\62\3\15\1\0\1\50\17\0\1\15\6\0"+
    "\1\32\1\15\2\32\1\63\3\15\1\32\1\15\3\32"+
    "\1\64\1\15\3\32\4\15\2\0\3\15\1\65\4\15"+
    "\1\66\3\15\1\0\1\50\17\0\1\15\6\0\1\32"+
    "\1\15\3\32\3\15\1\32\1\67\2\32\1\70\1\32"+
    "\1\15\3\32\4\15\2\0\7\15\1\71\4\15\1\0"+
    "\1\50\17\0\1\15\6\0\4\15\1\72\12\15\1\73"+
    "\6\15\2\0\3\15\1\72\5\15\1\73\2\15\21\0"+
    "\1\15\6\0\1\32\1\15\3\32\3\15\1\32\1\15"+
    "\4\32\1\15\3\32\4\15\2\0\14\15\1\0\1\50"+
    "\17\0\1\15\6\0\22\15\1\74\3\15\2\0\14\15"+
    "\21\0\1\15\6\0\1\32\1\15\3\32\3\15\1\32"+
    "\1\15\4\32\1\15\2\32\1\75\4\15\2\0\13\15"+
    "\1\76\1\0\1\50\17\0\1\15\6\0\1\32\1\15"+
    "\3\32\3\15\1\77\1\15\4\32\1\15\3\32\4\15"+
    "\2\0\4\15\1\100\7\15\1\0\1\50\1\0\1\101"+
    "\15\0\1\15\6\0\1\102\25\15\2\0\1\102\13\15"+
    "\21\0\1\15\6\0\17\15\1\60\6\15\2\0\11\15"+
    "\1\60\2\15\21\0\1\15\6\0\15\15\1\62\10\15"+
    "\2\0\10\15\1\62\3\15\21\0\1\15\6\0\4\15"+
    "\1\65\10\15\1\66\10\15\2\0\3\15\1\65\4\15"+
    "\1\66\3\15\21\0\1\15\6\0\11\15\1\67\2\15"+
    "\1\71\11\15\2\0\7\15\1\71\4\15\21\0\1\15"+
    "\6\0\21\15\1\76\4\15\2\0\13\15\1\76\21\0"+
    "\1\15\6\0\10\15\1\100\15\15\2\0\4\15\1\100"+
    "\7\15\3\0\1\101\24\0\1\50\1\0\3\50\3\0"+
    "\1\50\1\0\4\50\1\0\3\50\23\0\1\50\47\0"+
    "\1\103\21\0\1\103\24\0\1\56\70\0\1\15\6\0"+
    "\1\32\1\15\1\104\2\32\3\15\1\32\1\15\4\32"+
    "\1\15\3\32\4\15\2\0\1\15\1\105\12\15\1\0"+
    "\1\50\17\0\1\15\6\0\2\15\1\105\23\15\2\0"+
    "\1\15\1\105\12\15\21\0\1\15\6\0\1\32\1\15"+
    "\3\32\3\15\1\32\1\15\1\32\1\106\2\32\1\15"+
    "\3\32\4\15\2\0\6\15\1\107\5\15\1\0\1\50"+
    "\17\0\1\15\6\0\13\15\1\107\12\15\2\0\6\15"+
    "\1\107\5\15\21\0\1\15\6\0\1\32\1\15\3\32"+
    "\1\110\2\15\1\32\1\15\4\32\1\15\3\32\4\15"+
    "\2\0\14\15\1\0\1\50\17\0\1\15\6\0\1\32"+
    "\1\15\3\32\3\15\1\32\1\15\4\32\1\15\3\32"+
    "\1\111\3\15\2\0\14\15\1\0\1\50\17\0\1\15"+
    "\6\0\5\15\1\110\20\15\2\0\14\15\21\0\1\15"+
    "\6\0\22\15\1\111\3\15\2\0\14\15\21\0\1\15"+
    "\6\0\4\15\1\112\21\15\2\0\3\15\1\112\10\15"+
    "\21\0\1\15\6\0\1\32\1\15\3\32\3\15\1\32"+
    "\1\15\4\32\1\15\2\32\1\113\4\15\2\0\13\15"+
    "\1\114\1\0\1\50\17\0\1\15\6\0\21\15\1\114"+
    "\4\15\2\0\13\15\1\114\21\0\1\15\6\0\14\15"+
    "\1\115\11\15\2\0\7\15\1\115\4\15\21\0\1\15"+
    "\6\0\1\116\25\15\2\0\1\116\13\15\21\0\1\15"+
    "\6\0\14\15\1\117\11\15\2\0\7\15\1\117\4\15"+
    "\21\0\1\15\6\0\1\32\1\15\3\32\3\15\1\32"+
    "\1\15\4\32\1\15\1\120\2\32\4\15\2\0\11\15"+
    "\1\121\2\15\1\0\1\50\17\0\1\15\6\0\17\15"+
    "\1\121\6\15\2\0\11\15\1\121\2\15\21\0\1\15"+
    "\6\0\1\32\1\15\3\32\3\15\1\32\1\15\4\32"+
    "\1\15\2\32\1\122\4\15\2\0\13\15\1\123\1\0"+
    "\1\50\17\0\1\15\6\0\21\15\1\123\4\15\2\0"+
    "\13\15\1\123\51\0\1\124\21\0\1\124\21\0\1\15"+
    "\6\0\12\15\1\125\13\15\2\0\5\15\1\125\6\15"+
    "\47\0\1\126\21\0\1\126\23\0\1\15\6\0\1\32"+
    "\1\15\3\32\2\15\1\127\1\32\1\15\4\32\1\15"+
    "\3\32\4\15\2\0\14\15\1\0\1\50\17\0\1\15"+
    "\6\0\7\15\1\127\16\15\2\0\14\15\21\0\1\15"+
    "\6\0\1\32\1\15\3\32\3\15\1\32\1\15\4\32"+
    "\1\130\3\32\4\15\2\0\14\15\1\0\1\50\17\0"+
    "\1\15\6\0\16\15\1\130\7\15\2\0\14\15\21\0"+
    "\1\15\6\0\10\15\1\131\15\15\2\0\4\15\1\131"+
    "\7\15\3\0\1\132\15\0\1\15\6\0\1\15\1\133"+
    "\24\15\2\0\14\15\21\0\1\15\6\0\24\15\1\134"+
    "\1\15\2\0\14\15\21\0\1\15\6\0\1\32\1\15"+
    "\2\32\1\135\3\15\1\32\1\15\4\32\1\15\3\32"+
    "\4\15\2\0\3\15\1\136\10\15\1\0\1\50\17\0"+
    "\1\15\6\0\4\15\1\136\21\15\2\0\3\15\1\136"+
    "\10\15\21\0\1\15\6\0\4\15\1\137\21\15\2\0"+
    "\3\15\1\137\10\15\21\0\1\15\6\0\5\15\1\140"+
    "\20\15\2\0\14\15\21\0\1\15\6\0\21\15\1\141"+
    "\4\15\2\0\13\15\1\141\21\0\1\15\6\0\1\32"+
    "\1\15\3\32\3\15\1\142\1\15\4\32\1\15\3\32"+
    "\4\15\2\0\4\15\1\143\7\15\1\0\1\50\1\0"+
    "\1\144\15\0\1\15\6\0\10\15\1\143\15\15\2\0"+
    "\4\15\1\143\7\15\3\0\1\144\15\0\1\15\6\0"+
    "\1\32\1\15\3\32\3\15\1\32\1\15\4\32\1\15"+
    "\3\32\1\145\3\15\2\0\14\15\1\0\1\50\17\0"+
    "\1\15\6\0\22\15\1\145\3\15\2\0\14\15\52\0"+
    "\1\146\42\0\1\15\6\0\15\15\1\147\10\15\2\0"+
    "\10\15\1\147\3\15\40\0\1\144\23\0\1\144\12\0"+
    "\1\144\15\0\1\15\6\0\10\15\1\150\15\15\2\0"+
    "\4\15\1\150\7\15\3\0\1\151\15\0\1\15\6\0"+
    "\1\152\25\15\2\0\1\152\13\15\21\0\1\15\6\0"+
    "\14\15\1\153\11\15\2\0\7\15\1\153\4\15\44\0"+
    "\1\154\22\0\1\154\25\0\1\15\6\0\12\15\1\155"+
    "\13\15\2\0\5\15\1\155\6\15\21\0\1\15\6\0"+
    "\1\32\1\15\3\32\3\15\1\32\1\15\4\32\1\15"+
    "\1\156\2\32\4\15\2\0\11\15\1\157\2\15\1\0"+
    "\1\50\17\0\1\15\6\0\17\15\1\157\6\15\2\0"+
    "\11\15\1\157\2\15\21\0\1\15\6\0\17\15\1\160"+
    "\6\15\2\0\11\15\1\160\2\15\21\0\1\15\6\0"+
    "\10\15\1\161\15\15\2\0\4\15\1\161\7\15\3\0"+
    "\1\162\15\0\1\15\6\0\1\163\25\15\2\0\1\163"+
    "\13\15\21\0\1\15\6\0\1\32\1\15\3\32\3\15"+
    "\1\32\1\15\2\32\1\164\1\32\1\15\3\32\4\15"+
    "\2\0\7\15\1\165\4\15\1\0\1\50\17\0\1\15"+
    "\6\0\14\15\1\165\11\15\2\0\7\15\1\165\4\15"+
    "\44\0\1\166\22\0\1\166\25\0\1\15\6\0\12\15"+
    "\1\167\13\15\2\0\5\15\1\167\6\15\42\0\1\170"+
    "\22\0\1\170\27\0\1\15\6\0\17\15\1\171\6\15"+
    "\2\0\11\15\1\171\2\15\21\0\1\15\6\0\23\15"+
    "\1\172\2\15\2\0\14\15\53\0\1\173\41\0\1\15"+
    "\6\0\17\15\1\174\6\15\2\0\11\15\1\174\2\15"+
    "\21\0\1\15\6\0\10\15\1\175\15\15\2\0\4\15"+
    "\1\175\7\15\3\0\1\176\34\0\1\176\23\0\1\176"+
    "\12\0\1\176\15\0\1\15\6\0\4\15\1\177\21\15"+
    "\2\0\3\15\1\177\10\15\21\0\1\15\6\0\1\32"+
    "\1\15\3\32\3\15\1\32\1\15\3\32\1\200\1\15"+
    "\3\32\4\15\2\0\10\15\1\201\3\15\1\0\1\50"+
    "\17\0\1\15\6\0\15\15\1\201\10\15\2\0\10\15"+
    "\1\201\3\15\21\0\1\15\6\0\1\202\25\15\2\0"+
    "\1\202\13\15\21\0\1\15\6\0\2\15\1\203\23\15"+
    "\2\0\1\15\1\203\12\15\32\0\1\204\26\0\1\204"+
    "\33\0\1\15\6\0\11\15\1\205\14\15\2\0\14\15"+
    "\21\0\1\15\6\0\1\32\1\15\3\32\1\15\1\206"+
    "\1\15\1\32\1\15\4\32\1\15\3\32\4\15\2\0"+
    "\14\15\1\0\1\50\17\0\1\15\6\0\6\15\1\206"+
    "\17\15\2\0\14\15\36\0\1\207\56\0\1\15\6\0"+
    "\15\15\1\210\10\15\2\0\10\15\1\210\3\15\45\0"+
    "\1\211\22\0\1\211\24\0\1\15\6\0\4\15\1\212"+
    "\21\15\2\0\3\15\1\212\10\15\21\0\1\15\6\0"+
    "\15\15\1\213\10\15\2\0\10\15\1\213\3\15\45\0"+
    "\1\214\22\0\1\214\24\0\1\15\6\0\4\15\1\215"+
    "\21\15\2\0\3\15\1\215\10\15\21\0\1\15\6\0"+
    "\17\15\1\216\6\15\2\0\11\15\1\216\2\15\47\0"+
    "\1\217\21\0\1\217\23\0\1\15\6\0\1\32\1\15"+
    "\3\32\3\15\1\32\1\15\4\32\1\15\1\32\1\220"+
    "\1\32\4\15\2\0\12\15\1\221\1\15\1\0\1\50"+
    "\2\0\1\222\14\0\1\15\6\0\20\15\1\221\5\15"+
    "\2\0\12\15\1\221\1\15\4\0\1\222\14\0\1\15"+
    "\6\0\17\15\1\223\6\15\2\0\11\15\1\223\2\15"+
    "\21\0\1\15\6\0\1\224\25\15\2\0\1\224\13\15"+
    "\30\0\1\225\27\0\1\225\34\0\1\15\6\0\4\15"+
    "\1\226\21\15\2\0\3\15\1\226\10\15\21\0\1\15"+
    "\6\0\24\15\1\227\1\230\2\0\14\15\54\0\1\231"+
    "\1\232\37\0\1\15\6\0\20\15\1\233\5\15\2\0"+
    "\12\15\1\233\1\15\4\0\1\234\14\0\1\15\6\0"+
    "\6\15\1\235\17\15\2\0\14\15\36\0\1\236\56\0"+
    "\1\15\6\0\17\15\1\237\6\15\2\0\11\15\1\237"+
    "\2\15\21\0\1\15\6\0\1\15\1\240\10\15\1\241"+
    "\3\15\1\242\7\15\2\0\5\15\1\241\6\15\31\0"+
    "\1\243\10\0\1\244\3\0\1\245\16\0\1\244\27\0"+
    "\1\15\6\0\4\15\1\246\1\15\1\247\17\15\2\0"+
    "\3\15\1\246\10\15\21\0\1\15\6\0\12\15\1\250"+
    "\13\15\2\0\5\15\1\250\6\15\42\0\1\251\22\0"+
    "\1\251\27\0\1\15\6\0\4\15\1\252\21\15\2\0"+
    "\3\15\1\252\10\15\21\0\1\15\6\0\1\253\25\15"+
    "\2\0\1\253\13\15\21\0\1\15\6\0\10\15\1\254"+
    "\15\15\2\0\4\15\1\254\7\15\3\0\1\255\15\0"+
    "\1\15\6\0\10\15\1\256\15\15\2\0\4\15\1\256"+
    "\7\15\3\0\1\257\24\0\1\260\27\0\1\260\53\0"+
    "\1\255\23\0\1\255\12\0\1\255\34\0\1\257\23\0"+
    "\1\257\12\0\1\257\15\0\1\15\6\0\20\15\1\261"+
    "\5\15\2\0\12\15\1\261\1\15\4\0\1\262\14\0"+
    "\1\15\6\0\4\15\1\263\21\15\2\0\3\15\1\263"+
    "\10\15\21\0\1\15\6\0\15\15\1\264\10\15\2\0"+
    "\10\15\1\264\3\15\45\0\1\265\22\0\1\265\24\0"+
    "\1\15\6\0\16\15\1\266\7\15\2\0\14\15\21\0"+
    "\1\15\6\0\17\15\1\267\6\15\2\0\11\15\1\267"+
    "\2\15\21\0\1\15\6\0\14\15\1\270\11\15\2\0"+
    "\7\15\1\270\4\15\44\0\1\271\22\0\1\271\25\0"+
    "\1\15\6\0\4\15\1\272\21\15\2\0\3\15\1\272"+
    "\10\15\34\0\1\273\26\0\1\273\57\0\1\274\21\0"+
    "\1\274\23\0\1\15\6\0\16\15\1\275\7\15\2\0"+
    "\14\15\46\0\1\276\46\0\1\15\6\0\14\15\1\277"+
    "\11\15\2\0\7\15\1\277\4\15\21\0\1\15\6\0"+
    "\1\15\1\300\24\15\2\0\14\15\31\0\1\301\63\0"+
    "\1\15\6\0\15\15\1\302\10\15\2\0\10\15\1\302"+
    "\3\15\21\0\1\15\6\0\17\15\1\303\6\15\2\0"+
    "\11\15\1\303\2\15\21\0\1\15\6\0\4\15\1\304"+
    "\21\15\2\0\3\15\1\304\10\15\34\0\1\305\26\0"+
    "\1\305\57\0\1\306\21\0\1\306\23\0\1\15\6\0"+
    "\4\15\1\307\21\15\2\0\3\15\1\307\10\15\34\0"+
    "\1\310\26\0\1\310\31\0\1\15\6\0\4\15\1\311"+
    "\21\15\2\0\3\15\1\311\10\15\21\0\1\15\6\0"+
    "\1\312\25\15\2\0\1\312\13\15\30\0\1\313\27\0"+
    "\1\313\34\0\1\15\6\0\17\15\1\314\6\15\2\0"+
    "\11\15\1\314\2\15\21\0\1\15\6\0\1\315\25\15"+
    "\2\0\1\315\13\15\21\0\1\15\6\0\1\316\25\15"+
    "\2\0\1\316\13\15\30\0\1\317\27\0\1\317\43\0"+
    "\1\320\27\0\1\320\34\0\1\15\6\0\2\15\1\321"+
    "\23\15\2\0\1\15\1\321\12\15\32\0\1\322\26\0"+
    "\1\322\33\0\1\15\6\0\17\15\1\323\6\15\2\0"+
    "\11\15\1\323\2\15\21\0\1\15\6\0\12\15\1\324"+
    "\13\15\2\0\5\15\1\324\6\15\42\0\1\325\22\0"+
    "\1\325\27\0\1\15\6\0\21\15\1\326\4\15\2\0"+
    "\13\15\1\326\21\0\1\15\6\0\20\15\1\327\5\15"+
    "\2\0\12\15\1\327\1\15\4\0\1\330\14\0\1\15"+
    "\6\0\20\15\1\331\5\15\2\0\12\15\1\331\1\15"+
    "\4\0\1\332\43\0\1\332\21\0\1\332\5\0\1\332"+
    "\43\0\1\330\21\0\1\330\5\0\1\330\14\0\1\15"+
    "\6\0\10\15\1\333\15\15\2\0\4\15\1\333\7\15"+
    "\3\0\1\334\34\0\1\334\23\0\1\334\12\0\1\334"+
    "\15\0\1\15\6\0\1\335\25\15\2\0\1\335\13\15"+
    "\21\0\1\15\6\0\4\15\1\336\21\15\2\0\3\15"+
    "\1\336\10\15\34\0\1\337\26\0\1\337\31\0\1\15"+
    "\6\0\4\15\1\340\21\15\2\0\3\15\1\340\10\15"+
    "\21\0\1\15\6\0\5\15\1\341\20\15\2\0\14\15"+
    "\35\0\1\342\57\0\1\15\6\0\12\15\1\343\13\15"+
    "\2\0\5\15\1\343\6\15\21\0\1\15\6\0\20\15"+
    "\1\344\5\15\2\0\12\15\1\344\1\15\4\0\1\345"+
    "\43\0\1\345\21\0\1\345\5\0\1\345\14\0\1\15"+
    "\6\0\4\15\1\346\21\15\2\0\3\15\1\346\10\15"+
    "\21\0\1\15\6\0\10\15\1\347\15\15\2\0\4\15"+
    "\1\347\7\15\3\0\1\350\34\0\1\350\23\0\1\350"+
    "\12\0\1\350\15\0\1\15\6\0\20\15\1\351\5\15"+
    "\2\0\12\15\1\351\1\15\4\0\1\352\14\0\1\15"+
    "\6\0\2\15\1\353\23\15\2\0\1\15\1\353\12\15"+
    "\32\0\1\354\26\0\1\354\33\0\1\15\6\0\21\15"+
    "\1\355\4\15\2\0\13\15\1\355\51\0\1\356\21\0"+
    "\1\356\21\0\1\15\6\0\15\15\1\357\10\15\2\0"+
    "\10\15\1\357\3\15\45\0\1\360\22\0\1\360\24\0"+
    "\1\15\6\0\1\361\25\15\2\0\1\361\13\15\30\0"+
    "\1\362\27\0\1\362\34\0\1\15\6\0\3\15\1\363"+
    "\22\15\2\0\2\15\1\363\11\15\33\0\1\364\26\0"+
    "\1\364\32\0\1\15\6\0\10\15\1\365\15\15\2\0"+
    "\4\15\1\365\7\15\3\0\1\366\34\0\1\366\23\0"+
    "\1\366\12\0\1\366\15\0\1\15\6\0\20\15\1\367"+
    "\5\15\2\0\12\15\1\367\1\15\4\0\1\370\43\0"+
    "\1\370\21\0\1\370\5\0\1\370\14\0\1\15\6\0"+
    "\21\15\1\371\4\15\2\0\13\15\1\371\51\0\1\372"+
    "\21\0\1\372\21\0\1\15\6\0\10\15\1\373\15\15"+
    "\2\0\4\15\1\373\7\15\3\0\1\374\34\0\1\374"+
    "\23\0\1\374\12\0\1\374\15\0\1\15\6\0\2\15"+
    "\1\375\23\15\2\0\1\15\1\375\12\15\32\0\1\376"+
    "\26\0\1\376\33\0\1\15\6\0\15\15\1\377\10\15"+
    "\2\0\10\15\1\377\3\15\45\0\1\u0100\22\0\1\u0100"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\4\11\1\1\1\11"+
    "\1\1\2\11\1\1\3\11\13\1\2\11\6\1\1\11"+
    "\1\1\1\11\1\1\3\11\23\1\1\0\1\1\1\0"+
    "\20\1\1\0\1\1\1\0\3\1\1\0\11\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\5\1\1\0\2\1\1\11\4\1\1\11\2\1\1\0"+
    "\2\1\1\11\2\1\1\0\3\1\2\11\1\1\1\11"+
    "\1\1\1\0\4\1\3\0\3\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\2\1\1\0\3\1"+
    "\2\0\1\1\1\0\2\1\1\0\3\1\2\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico2(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            }
            // fall through
          case 44: break;
          case 2:
            { 
            }
            // fall through
          case 45: break;
          case 3:
            { yychar=1;
            }
            // fall through
          case 46: break;
          case 4:
            { return new Symbol(sym.CADENAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 47: break;
          case 5:
            { return new Symbol(sym.MONEDA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 48: break;
          case 6:
            { return new Symbol(sym.COMILLA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 49: break;
          case 7:
            { return new Symbol(sym.PAR1, yyline, (int) yychar, yytext());
            }
            // fall through
          case 50: break;
          case 8:
            { return new Symbol(sym.PAR2, yyline, (int) yychar, yytext());
            }
            // fall through
          case 51: break;
          case 9:
            { return new Symbol(sym.COMA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 52: break;
          case 10:
            { return new Symbol(sym.LETRAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 53: break;
          case 11:
            { return new Symbol(sym.PUNTO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 54: break;
          case 12:
            { return new Symbol(sym.DIVIDIDO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 55: break;
          case 13:
            { return new Symbol(sym.ENTEROS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 56: break;
          case 14:
            { return new Symbol(sym.DOSPUNTOS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 57: break;
          case 15:
            { return new Symbol(sym.PUNTOYCOMA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 58: break;
          case 16:
            { return new Symbol(sym.IGUAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 59: break;
          case 17:
            { return new Symbol(sym.CDM, yyline, (int) yychar, yytext());
            }
            // fall through
          case 60: break;
          case 18:
            { return new Symbol(sym.CORCHETE1, yyline, (int) yychar, yytext());
            }
            // fall through
          case 61: break;
          case 19:
            { return new Symbol(sym.CORCHETE2, yyline, (int) yychar, yytext());
            }
            // fall through
          case 62: break;
          case 20:
            { return new Symbol(sym.LLAVE1, yyline, (int) yychar, yytext());
            }
            // fall through
          case 63: break;
          case 21:
            { return new Symbol(sym.COMBINACION, yyline, (int) yychar, yytext());
            }
            // fall through
          case 64: break;
          case 22:
            { return new Symbol(sym.LLAVE2, yyline, (int) yychar, yytext());
            }
            // fall through
          case 65: break;
          case 23:
            { return new Symbol(sym.COMENTARIOS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 66: break;
          case 24:
            { return new Symbol(sym.COMENINICIAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 67: break;
          case 25:
            { return new Symbol(sym.COMENFINAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 68: break;
          case 26:
            { return new Symbol(sym.DECIMALES, yyline, (int) yychar, yytext());
            }
            // fall through
          case 69: break;
          case 27:
            { return new Symbol(sym.EJEX, yyline, (int) yychar, yytext());
            }
            // fall through
          case 70: break;
          case 28:
            { return new Symbol(sym.DOUBLE, yyline, (int) yychar, yytext());
            }
            // fall through
          case 71: break;
          case 29:
            { return new Symbol(sym.STRING, yyline, (int) yychar, yytext());
            }
            // fall through
          case 72: break;
          case 30:
            { return new Symbol(sym.TITULO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 73: break;
          case 31:
            { return new Symbol(sym.ARCHIVO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 74: break;
          case 32:
            { return new Symbol(sym.COMPARE, yyline, (int) yychar, yytext());
            }
            // fall through
          case 75: break;
          case 33:
            { return new Symbol(sym.OTROENTERO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 76: break;
          case 34:
            { return new Symbol(sym.TITULOX, yyline, (int) yychar, yytext());
            }
            // fall through
          case 77: break;
          case 35:
            { return new Symbol(sym.TITULOY, yyline, (int) yychar, yytext());
            }
            // fall through
          case 78: break;
          case 36:
            { return new Symbol(sym.VALORES, yyline, (int) yychar, yytext());
            }
            // fall through
          case 79: break;
          case 37:
            { return new Symbol(sym.GRAFICAPIE, yyline, (int) yychar, yytext());
            }
            // fall through
          case 80: break;
          case 38:
            { return new Symbol(sym.GRAFICABARRAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 81: break;
          case 39:
            { return new Symbol(sym.GRAFICALINEAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 82: break;
          case 40:
            { return new Symbol(sym.PUNTAJEGENERAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 83: break;
          case 41:
            { return new Symbol(sym.DEFINIRGLOBALES, yyline, (int) yychar, yytext());
            }
            // fall through
          case 84: break;
          case 42:
            { return new Symbol(sym.PUNTAJEESPECIFICO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 85: break;
          case 43:
            { return new Symbol(sym.GENERARREPORTEESTADISTICO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
