// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/analizadores3/Lexico.jflex

package analizadores3;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\0\1\13\1\0\1\14\1\15\12\16\1\17\1\20"+
    "\1\0\1\21\3\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\34\1\42\1\43\1\44\1\45"+
    "\1\46\1\34\1\47\1\50\1\34\1\51\1\0\1\52"+
    "\3\0\1\53\1\23\1\54\1\55\1\56\1\27\1\30"+
    "\1\31\1\57\1\33\1\34\1\60\1\61\1\62\1\63"+
    "\1\41\1\34\1\64\1\65\1\66\1\45\1\46\1\34"+
    "\1\47\1\50\1\34\1\67\1\70\1\71\7\0\1\3"+
    "\113\0\1\34\37\0\1\34\76\0\2\72\115\0\1\73"+
    "\u019c\0\1\4\13\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\17\1\20\10\17\1\21\1\22\1\17\1\20"+
    "\4\17\1\23\1\24\1\25\1\1\1\26\1\27\1\30"+
    "\1\31\22\17\1\0\1\17\1\0\20\17\1\0\1\17"+
    "\1\0\3\17\1\0\1\17\1\32\7\17\1\0\1\17"+
    "\1\0\2\17\1\0\2\17\1\0\5\17\1\0\3\17"+
    "\1\0\1\17\1\0\2\17\1\0\2\17\1\0\1\33"+
    "\4\17\1\0\1\17\2\34\2\35\1\17\2\36\1\37"+
    "\1\17\1\0\3\40\2\17\1\0\1\17\1\41\1\42"+
    "\1\41\1\42\2\43\1\17\1\0\4\17\3\0\3\17"+
    "\1\0\3\17\1\0\1\17\2\0\1\17\1\0\2\17"+
    "\1\0\3\17\1\0\2\44\1\0\1\17\1\0\2\17"+
    "\1\0\3\17\2\0\1\17\1\0\2\17\1\0\3\17"+
    "\2\0\1\17\1\0\2\17\1\0\1\17\2\45\2\46"+
    "\1\17\1\0\2\17\1\0\2\17\1\0\1\47\2\50"+
    "\2\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\2\51\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\1\17\1\0\2\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\74\0\264\0\74\0\74"+
    "\0\74\0\74\0\360\0\74\0\74\0\u012c\0\74\0\74"+
    "\0\74\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\74\0\74\0\u03fc\0\u0438"+
    "\0\u0474\0\u04b0\0\u04ec\0\u0528\0\74\0\u0564\0\74\0\u05a0"+
    "\0\74\0\74\0\74\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u01a4\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u01a4\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\u01a4\0\74\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u01a4\0\74\0\u01a4\0\u1ab8\0\u1af4\0\u02d0\0\u01a4\0\74"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u01a4\0\u01a4\0\74\0\74"+
    "\0\u01a4\0\74\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c"+
    "\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u01a4"+
    "\0\74\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634"+
    "\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814"+
    "\0\u2850\0\u288c\0\u28c8\0\u2904\0\u01a4\0\74\0\u01a4\0\74"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u01a4\0\u01a4\0\74\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u01a4\0\74\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58"+
    "\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u01a4\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\23"+
    "\1\27\1\23\1\30\2\23\4\30\1\31\1\30\1\32"+
    "\1\33\1\23\1\34\2\23\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\6\23\1\43\1\44\1\45\1\46\1\47"+
    "\1\2\1\50\75\0\1\3\77\0\1\51\4\0\1\52"+
    "\66\0\1\53\102\0\1\54\1\0\1\16\77\0\1\30"+
    "\1\23\3\30\3\23\1\30\2\23\4\30\1\23\1\55"+
    "\2\30\4\23\2\0\11\23\1\56\2\23\1\0\1\46"+
    "\25\0\27\23\2\0\14\23\27\0\1\30\1\23\3\30"+
    "\3\23\1\30\2\23\3\30\1\57\1\23\3\30\4\23"+
    "\2\0\10\23\1\60\3\23\1\0\1\46\25\0\1\30"+
    "\1\23\2\30\1\61\3\23\1\30\2\23\3\30\1\62"+
    "\1\23\3\30\4\23\2\0\3\23\1\63\4\23\1\64"+
    "\3\23\1\0\1\46\25\0\1\30\1\23\3\30\3\23"+
    "\1\30\1\65\1\23\2\30\1\66\1\30\1\23\3\30"+
    "\4\23\2\0\7\23\1\67\4\23\1\0\1\46\25\0"+
    "\4\23\1\70\13\23\1\71\6\23\2\0\3\23\1\70"+
    "\5\23\1\71\2\23\27\0\1\30\1\23\3\30\3\23"+
    "\1\30\2\23\4\30\1\23\3\30\4\23\2\0\14\23"+
    "\1\0\1\46\25\0\23\23\1\72\3\23\2\0\14\23"+
    "\27\0\1\30\1\23\3\30\3\23\1\30\2\23\4\30"+
    "\1\23\2\30\1\73\4\23\2\0\13\23\1\74\1\0"+
    "\1\46\25\0\1\30\1\23\3\30\3\23\1\75\2\23"+
    "\4\30\1\23\3\30\4\23\2\0\4\23\1\76\7\23"+
    "\1\0\1\46\1\0\1\77\23\0\1\100\26\23\2\0"+
    "\1\100\13\23\27\0\20\23\1\56\6\23\2\0\11\23"+
    "\1\56\2\23\27\0\16\23\1\60\10\23\2\0\10\23"+
    "\1\60\3\23\27\0\4\23\1\63\11\23\1\64\10\23"+
    "\2\0\3\23\1\63\4\23\1\64\3\23\27\0\11\23"+
    "\1\65\3\23\1\67\11\23\2\0\7\23\1\67\4\23"+
    "\27\0\22\23\1\74\4\23\2\0\13\23\1\74\27\0"+
    "\10\23\1\76\16\23\2\0\4\23\1\76\7\23\3\0"+
    "\1\77\23\0\1\46\1\0\3\46\3\0\1\46\2\0"+
    "\4\46\1\0\3\46\23\0\1\46\47\0\1\101\21\0"+
    "\1\101\23\0\1\54\77\0\1\30\1\23\1\102\2\30"+
    "\3\23\1\30\2\23\4\30\1\23\3\30\4\23\2\0"+
    "\1\23\1\103\12\23\1\0\1\46\25\0\2\23\1\103"+
    "\24\23\2\0\1\23\1\103\12\23\27\0\1\30\1\23"+
    "\3\30\3\23\1\30\2\23\1\30\1\104\2\30\1\23"+
    "\3\30\4\23\2\0\6\23\1\105\5\23\1\0\1\46"+
    "\25\0\14\23\1\105\12\23\2\0\6\23\1\105\5\23"+
    "\27\0\1\30\1\23\3\30\1\106\2\23\1\30\2\23"+
    "\4\30\1\23\3\30\4\23\2\0\14\23\1\0\1\46"+
    "\25\0\1\30\1\23\3\30\3\23\1\30\2\23\4\30"+
    "\1\23\3\30\1\107\3\23\2\0\14\23\1\0\1\46"+
    "\25\0\5\23\1\106\21\23\2\0\14\23\27\0\23\23"+
    "\1\107\3\23\2\0\14\23\27\0\4\23\1\110\22\23"+
    "\2\0\3\23\1\110\10\23\27\0\1\30\1\23\3\30"+
    "\3\23\1\30\2\23\4\30\1\23\2\30\1\111\4\23"+
    "\2\0\13\23\1\112\1\0\1\46\25\0\22\23\1\112"+
    "\4\23\2\0\13\23\1\112\27\0\15\23\1\113\11\23"+
    "\2\0\7\23\1\113\4\23\27\0\1\114\26\23\2\0"+
    "\1\114\13\23\27\0\15\23\1\115\11\23\2\0\7\23"+
    "\1\115\4\23\27\0\1\30\1\23\3\30\3\23\1\30"+
    "\2\23\4\30\1\23\1\116\2\30\4\23\2\0\11\23"+
    "\1\117\2\23\1\0\1\46\25\0\20\23\1\117\6\23"+
    "\2\0\11\23\1\117\2\23\27\0\1\30\1\23\3\30"+
    "\3\23\1\30\2\23\4\30\1\23\2\30\1\120\4\23"+
    "\2\0\13\23\1\121\1\0\1\46\25\0\22\23\1\121"+
    "\4\23\2\0\13\23\1\121\51\0\1\122\21\0\1\122"+
    "\27\0\13\23\1\123\13\23\2\0\5\23\1\123\6\23"+
    "\47\0\1\124\21\0\1\124\31\0\1\30\1\23\3\30"+
    "\2\23\1\125\1\30\2\23\4\30\1\23\3\30\4\23"+
    "\2\0\14\23\1\0\1\46\25\0\7\23\1\125\17\23"+
    "\2\0\14\23\27\0\1\30\1\23\3\30\3\23\1\30"+
    "\2\23\4\30\1\126\3\30\4\23\2\0\14\23\1\0"+
    "\1\46\25\0\17\23\1\126\7\23\2\0\14\23\27\0"+
    "\10\23\1\127\16\23\2\0\4\23\1\127\7\23\3\0"+
    "\1\130\23\0\1\23\1\131\25\23\2\0\14\23\27\0"+
    "\25\23\1\132\1\23\2\0\14\23\27\0\1\30\1\23"+
    "\2\30\1\133\3\23\1\30\2\23\4\30\1\23\3\30"+
    "\4\23\2\0\3\23\1\134\10\23\1\0\1\46\25\0"+
    "\4\23\1\134\22\23\2\0\3\23\1\134\10\23\27\0"+
    "\4\23\1\135\22\23\2\0\3\23\1\135\10\23\27\0"+
    "\5\23\1\136\21\23\2\0\14\23\27\0\22\23\1\137"+
    "\4\23\2\0\13\23\1\137\27\0\1\30\1\23\3\30"+
    "\3\23\1\140\2\23\4\30\1\23\3\30\4\23\2\0"+
    "\4\23\1\141\7\23\1\0\1\46\1\0\1\142\23\0"+
    "\10\23\1\141\16\23\2\0\4\23\1\141\7\23\3\0"+
    "\1\142\23\0\1\30\1\23\3\30\3\23\1\30\2\23"+
    "\4\30\1\23\3\30\1\143\3\23\2\0\14\23\1\0"+
    "\1\46\25\0\23\23\1\143\3\23\2\0\14\23\52\0"+
    "\1\144\50\0\16\23\1\145\10\23\2\0\10\23\1\145"+
    "\3\23\37\0\1\142\24\0\1\142\12\0\1\142\23\0"+
    "\10\23\1\146\16\23\2\0\4\23\1\146\7\23\3\0"+
    "\1\147\23\0\1\150\26\23\2\0\1\150\13\23\27\0"+
    "\15\23\1\151\11\23\2\0\7\23\1\151\4\23\44\0"+
    "\1\152\22\0\1\152\33\0\13\23\1\153\13\23\2\0"+
    "\5\23\1\153\6\23\27\0\1\30\1\23\3\30\3\23"+
    "\1\30\2\23\4\30\1\23\1\154\2\30\4\23\2\0"+
    "\11\23\1\155\2\23\1\0\1\46\25\0\20\23\1\155"+
    "\6\23\2\0\11\23\1\155\2\23\27\0\20\23\1\156"+
    "\6\23\2\0\11\23\1\156\2\23\27\0\10\23\1\157"+
    "\16\23\2\0\4\23\1\157\7\23\3\0\1\160\23\0"+
    "\1\161\26\23\2\0\1\161\13\23\27\0\1\30\1\23"+
    "\3\30\3\23\1\30\2\23\2\30\1\162\1\30\1\23"+
    "\3\30\4\23\2\0\7\23\1\163\4\23\1\0\1\46"+
    "\25\0\15\23\1\163\11\23\2\0\7\23\1\163\4\23"+
    "\44\0\1\164\22\0\1\164\33\0\13\23\1\165\13\23"+
    "\2\0\5\23\1\165\6\23\42\0\1\166\22\0\1\166"+
    "\35\0\20\23\1\167\6\23\2\0\11\23\1\167\2\23"+
    "\27\0\24\23\1\170\2\23\2\0\14\23\53\0\1\171"+
    "\47\0\20\23\1\172\6\23\2\0\11\23\1\172\2\23"+
    "\27\0\10\23\1\173\16\23\2\0\4\23\1\173\7\23"+
    "\3\0\1\174\33\0\1\174\24\0\1\174\12\0\1\174"+
    "\23\0\4\23\1\175\22\23\2\0\3\23\1\175\10\23"+
    "\27\0\1\30\1\23\3\30\3\23\1\30\2\23\3\30"+
    "\1\176\1\23\3\30\4\23\2\0\10\23\1\177\3\23"+
    "\1\0\1\46\25\0\16\23\1\177\10\23\2\0\10\23"+
    "\1\177\3\23\27\0\1\200\26\23\2\0\1\200\13\23"+
    "\27\0\2\23\1\201\24\23\2\0\1\23\1\201\12\23"+
    "\31\0\1\202\27\0\1\202\41\0\11\23\1\203\15\23"+
    "\2\0\14\23\27\0\1\30\1\23\3\30\1\23\1\204"+
    "\1\23\1\30\2\23\4\30\1\23\3\30\4\23\2\0"+
    "\14\23\1\0\1\46\25\0\6\23\1\204\20\23\2\0"+
    "\14\23\35\0\1\205\65\0\16\23\1\206\10\23\2\0"+
    "\10\23\1\206\3\23\45\0\1\207\22\0\1\207\32\0"+
    "\4\23\1\210\22\23\2\0\3\23\1\210\10\23\27\0"+
    "\16\23\1\211\10\23\2\0\10\23\1\211\3\23\45\0"+
    "\1\212\22\0\1\212\32\0\4\23\1\213\22\23\2\0"+
    "\3\23\1\213\10\23\27\0\20\23\1\214\6\23\2\0"+
    "\11\23\1\214\2\23\47\0\1\215\21\0\1\215\31\0"+
    "\1\30\1\23\3\30\3\23\1\30\2\23\4\30\1\23"+
    "\1\30\1\216\1\30\4\23\2\0\12\23\1\217\1\23"+
    "\1\0\1\46\2\0\1\220\22\0\21\23\1\217\5\23"+
    "\2\0\12\23\1\217\1\23\4\0\1\220\22\0\20\23"+
    "\1\221\6\23\2\0\11\23\1\221\2\23\27\0\1\222"+
    "\26\23\2\0\1\222\13\23\27\0\1\223\30\0\1\223"+
    "\42\0\4\23\1\224\22\23\2\0\3\23\1\224\10\23"+
    "\27\0\25\23\1\225\1\226\2\0\14\23\54\0\1\227"+
    "\1\230\45\0\21\23\1\231\5\23\2\0\12\23\1\231"+
    "\1\23\4\0\1\232\22\0\6\23\1\233\20\23\2\0"+
    "\14\23\35\0\1\234\65\0\20\23\1\235\6\23\2\0"+
    "\11\23\1\235\2\23\27\0\1\23\1\236\11\23\1\237"+
    "\3\23\1\240\7\23\2\0\5\23\1\237\6\23\30\0"+
    "\1\241\11\0\1\242\3\0\1\243\16\0\1\242\35\0"+
    "\4\23\1\244\1\23\1\245\20\23\2\0\3\23\1\244"+
    "\10\23\27\0\13\23\1\246\13\23\2\0\5\23\1\246"+
    "\6\23\42\0\1\247\22\0\1\247\35\0\4\23\1\250"+
    "\22\23\2\0\3\23\1\250\10\23\27\0\1\251\26\23"+
    "\2\0\1\251\13\23\27\0\10\23\1\252\16\23\2\0"+
    "\4\23\1\252\7\23\3\0\1\253\23\0\10\23\1\254"+
    "\16\23\2\0\4\23\1\254\7\23\3\0\1\255\23\0"+
    "\1\256\30\0\1\256\52\0\1\253\24\0\1\253\12\0"+
    "\1\253\33\0\1\255\24\0\1\255\12\0\1\255\23\0"+
    "\21\23\1\257\5\23\2\0\12\23\1\257\1\23\4\0"+
    "\1\260\22\0\4\23\1\261\22\23\2\0\3\23\1\261"+
    "\10\23\27\0\16\23\1\262\10\23\2\0\10\23\1\262"+
    "\3\23\45\0\1\263\22\0\1\263\32\0\17\23\1\264"+
    "\7\23\2\0\14\23\27\0\20\23\1\265\6\23\2\0"+
    "\11\23\1\265\2\23\27\0\15\23\1\266\11\23\2\0"+
    "\7\23\1\266\4\23\44\0\1\267\22\0\1\267\33\0"+
    "\4\23\1\270\22\23\2\0\3\23\1\270\10\23\33\0"+
    "\1\271\27\0\1\271\57\0\1\272\21\0\1\272\31\0"+
    "\17\23\1\273\7\23\2\0\14\23\46\0\1\274\54\0"+
    "\15\23\1\275\11\23\2\0\7\23\1\275\4\23\27\0"+
    "\1\23\1\276\25\23\2\0\14\23\30\0\1\277\72\0"+
    "\16\23\1\300\10\23\2\0\10\23\1\300\3\23\27\0"+
    "\20\23\1\301\6\23\2\0\11\23\1\301\2\23\27\0"+
    "\4\23\1\302\22\23\2\0\3\23\1\302\10\23\33\0"+
    "\1\303\27\0\1\303\57\0\1\304\21\0\1\304\31\0"+
    "\4\23\1\305\22\23\2\0\3\23\1\305\10\23\33\0"+
    "\1\306\27\0\1\306\37\0\4\23\1\307\22\23\2\0"+
    "\3\23\1\307\10\23\27\0\1\310\26\23\2\0\1\310"+
    "\13\23\27\0\1\311\30\0\1\311\42\0\20\23\1\312"+
    "\6\23\2\0\11\23\1\312\2\23\27\0\1\313\26\23"+
    "\2\0\1\313\13\23\27\0\1\314\26\23\2\0\1\314"+
    "\13\23\27\0\1\315\30\0\1\315\42\0\1\316\30\0"+
    "\1\316\42\0\2\23\1\317\24\23\2\0\1\23\1\317"+
    "\12\23\31\0\1\320\27\0\1\320\41\0\20\23\1\321"+
    "\6\23\2\0\11\23\1\321\2\23\27\0\13\23\1\322"+
    "\13\23\2\0\5\23\1\322\6\23\42\0\1\323\22\0"+
    "\1\323\35\0\22\23\1\324\4\23\2\0\13\23\1\324"+
    "\27\0\21\23\1\325\5\23\2\0\12\23\1\325\1\23"+
    "\4\0\1\326\22\0\21\23\1\327\5\23\2\0\12\23"+
    "\1\327\1\23\4\0\1\330\43\0\1\330\21\0\1\330"+
    "\5\0\1\330\43\0\1\326\21\0\1\326\5\0\1\326"+
    "\22\0\10\23\1\331\16\23\2\0\4\23\1\331\7\23"+
    "\3\0\1\332\33\0\1\332\24\0\1\332\12\0\1\332"+
    "\23\0\1\333\26\23\2\0\1\333\13\23\27\0\4\23"+
    "\1\334\22\23\2\0\3\23\1\334\10\23\33\0\1\335"+
    "\27\0\1\335\37\0\4\23\1\336\22\23\2\0\3\23"+
    "\1\336\10\23\27\0\5\23\1\337\21\23\2\0\14\23"+
    "\34\0\1\340\66\0\13\23\1\341\13\23\2\0\5\23"+
    "\1\341\6\23\27\0\21\23\1\342\5\23\2\0\12\23"+
    "\1\342\1\23\4\0\1\343\43\0\1\343\21\0\1\343"+
    "\5\0\1\343\22\0\4\23\1\344\22\23\2\0\3\23"+
    "\1\344\10\23\27\0\10\23\1\345\16\23\2\0\4\23"+
    "\1\345\7\23\3\0\1\346\33\0\1\346\24\0\1\346"+
    "\12\0\1\346\23\0\21\23\1\347\5\23\2\0\12\23"+
    "\1\347\1\23\4\0\1\350\22\0\2\23\1\351\24\23"+
    "\2\0\1\23\1\351\12\23\31\0\1\352\27\0\1\352"+
    "\41\0\22\23\1\353\4\23\2\0\13\23\1\353\51\0"+
    "\1\354\21\0\1\354\27\0\16\23\1\355\10\23\2\0"+
    "\10\23\1\355\3\23\45\0\1\356\22\0\1\356\32\0"+
    "\1\357\26\23\2\0\1\357\13\23\27\0\1\360\30\0"+
    "\1\360\42\0\3\23\1\361\23\23\2\0\2\23\1\361"+
    "\11\23\32\0\1\362\27\0\1\362\40\0\10\23\1\363"+
    "\16\23\2\0\4\23\1\363\7\23\3\0\1\364\33\0"+
    "\1\364\24\0\1\364\12\0\1\364\23\0\21\23\1\365"+
    "\5\23\2\0\12\23\1\365\1\23\4\0\1\366\43\0"+
    "\1\366\21\0\1\366\5\0\1\366\22\0\22\23\1\367"+
    "\4\23\2\0\13\23\1\367\51\0\1\370\21\0\1\370"+
    "\27\0\10\23\1\371\16\23\2\0\4\23\1\371\7\23"+
    "\3\0\1\372\33\0\1\372\24\0\1\372\12\0\1\372"+
    "\23\0\2\23\1\373\24\23\2\0\1\23\1\373\12\23"+
    "\31\0\1\374\27\0\1\374\41\0\16\23\1\375\10\23"+
    "\2\0\10\23\1\375\3\23\45\0\1\376\22\0\1\376"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\4\11\1\1\2\11"+
    "\1\1\3\11\13\1\2\11\6\1\1\11\1\1\1\11"+
    "\1\1\3\11\23\1\1\0\1\1\1\0\20\1\1\0"+
    "\1\1\1\0\3\1\1\0\11\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\5\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\5\1\1\0"+
    "\2\1\1\11\4\1\1\11\2\1\1\0\2\1\1\11"+
    "\2\1\1\0\3\1\2\11\1\1\1\11\1\1\1\0"+
    "\4\1\3\0\3\1\1\0\3\1\1\0\1\1\2\0"+
    "\1\1\1\0\2\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\0\3\1\2\0\1\1"+
    "\1\0\2\1\1\0\3\1\2\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            }
            // fall through
          case 43: break;
          case 2:
            { 
            }
            // fall through
          case 44: break;
          case 3:
            { yychar=1;
            }
            // fall through
          case 45: break;
          case 4:
            { return new Symbol(sym.CADENAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 46: break;
          case 5:
            { return new Symbol(sym.MONEDA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 47: break;
          case 6:
            { return new Symbol(sym.COMILLA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 48: break;
          case 7:
            { return new Symbol(sym.PAR1, yyline, (int) yychar, yytext());
            }
            // fall through
          case 49: break;
          case 8:
            { return new Symbol(sym.PAR2, yyline, (int) yychar, yytext());
            }
            // fall through
          case 50: break;
          case 9:
            { return new Symbol(sym.COMA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 51: break;
          case 10:
            { return new Symbol(sym.DIVIDIDO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 52: break;
          case 11:
            { return new Symbol(sym.ENTEROS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 53: break;
          case 12:
            { return new Symbol(sym.DOSPUNTOS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 54: break;
          case 13:
            { return new Symbol(sym.PUNTOYCOMA, yyline, (int) yychar, yytext());
            }
            // fall through
          case 55: break;
          case 14:
            { return new Symbol(sym.IGUAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 56: break;
          case 15:
            { return new Symbol(sym.LETRAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 57: break;
          case 16:
            { return new Symbol(sym.CDM, yyline, (int) yychar, yytext());
            }
            // fall through
          case 58: break;
          case 17:
            { return new Symbol(sym.CORCHETE1, yyline, (int) yychar, yytext());
            }
            // fall through
          case 59: break;
          case 18:
            { return new Symbol(sym.CORCHETE2, yyline, (int) yychar, yytext());
            }
            // fall through
          case 60: break;
          case 19:
            { return new Symbol(sym.LLAVE1, yyline, (int) yychar, yytext());
            }
            // fall through
          case 61: break;
          case 20:
            { return new Symbol(sym.COMBINACION, yyline, (int) yychar, yytext());
            }
            // fall through
          case 62: break;
          case 21:
            { return new Symbol(sym.LLAVE2, yyline, (int) yychar, yytext());
            }
            // fall through
          case 63: break;
          case 22:
            { return new Symbol(sym.COMENTARIOS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 64: break;
          case 23:
            { return new Symbol(sym.COMENINICIAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 65: break;
          case 24:
            { return new Symbol(sym.COMENFINAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 66: break;
          case 25:
            { return new Symbol(sym.DECIMALES, yyline, (int) yychar, yytext());
            }
            // fall through
          case 67: break;
          case 26:
            { return new Symbol(sym.EJEX, yyline, (int) yychar, yytext());
            }
            // fall through
          case 68: break;
          case 27:
            { return new Symbol(sym.DOUBLE, yyline, (int) yychar, yytext());
            }
            // fall through
          case 69: break;
          case 28:
            { return new Symbol(sym.STRING, yyline, (int) yychar, yytext());
            }
            // fall through
          case 70: break;
          case 29:
            { return new Symbol(sym.TITULO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 71: break;
          case 30:
            { return new Symbol(sym.ARCHIVO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 72: break;
          case 31:
            { return new Symbol(sym.COMPARE, yyline, (int) yychar, yytext());
            }
            // fall through
          case 73: break;
          case 32:
            { return new Symbol(sym.OTROENTERO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 74: break;
          case 33:
            { return new Symbol(sym.TITULOX, yyline, (int) yychar, yytext());
            }
            // fall through
          case 75: break;
          case 34:
            { return new Symbol(sym.TITULOY, yyline, (int) yychar, yytext());
            }
            // fall through
          case 76: break;
          case 35:
            { return new Symbol(sym.VALORES, yyline, (int) yychar, yytext());
            }
            // fall through
          case 77: break;
          case 36:
            { return new Symbol(sym.GRAFICAPIE, yyline, (int) yychar, yytext());
            }
            // fall through
          case 78: break;
          case 37:
            { return new Symbol(sym.GRAFICABARRAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 79: break;
          case 38:
            { return new Symbol(sym.GRAFICALINEAS, yyline, (int) yychar, yytext());
            }
            // fall through
          case 80: break;
          case 39:
            { return new Symbol(sym.PUNTAJEGENERAL, yyline, (int) yychar, yytext());
            }
            // fall through
          case 81: break;
          case 40:
            { return new Symbol(sym.DEFINIRGLOBALES, yyline, (int) yychar, yytext());
            }
            // fall through
          case 82: break;
          case 41:
            { return new Symbol(sym.PUNTAJEESPECIFICO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 83: break;
          case 42:
            { return new Symbol(sym.GENERARREPORTEESTADISTICO, yyline, (int) yychar, yytext());
            }
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
