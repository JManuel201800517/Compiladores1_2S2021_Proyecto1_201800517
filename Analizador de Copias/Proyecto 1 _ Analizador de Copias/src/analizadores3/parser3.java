
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores3;

import java_cup.runtime.*;
import proyecto.pkg1.pkg_.analizador.de.copias.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser3 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser3() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser3(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser3(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\006\000\002\032\003\000\002\002\004" +
    "\000\002\002\005\000\002\002\006\000\002\003\004\000" +
    "\002\004\004\000\002\005\004\000\002\006\004\000\002" +
    "\007\003\000\002\007\012\000\002\007\003\000\002\007" +
    "\005\000\002\007\006\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\025\012\000\002\025\010\000" +
    "\002\025\005\000\002\025\006\000\002\025\004\000\002" +
    "\042\004\000\002\042\004\000\002\042\003\000\002\042" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\004\000" +
    "\002\034\003\000\002\015\012\000\002\015\003\000\002" +
    "\027\004\000\002\027\004\000\002\027\003\000\002\027" +
    "\003\000\002\012\033\000\002\012\005\000\002\012\006" +
    "\000\002\012\004\000\002\013\013\000\002\013\005\000" +
    "\002\013\006\000\002\013\004\000\002\014\023\000\002" +
    "\014\005\000\002\014\006\000\002\014\004\000\002\016" +
    "\005\000\002\016\003\000\002\043\004\000\002\043\004" +
    "\000\002\043\003\000\002\043\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\037\004\000\002\037" +
    "\004\000\002\037\003\000\002\037\003\000\002\021\005" +
    "\000\002\021\003\000\002\021\005\000\002\022\005\000" +
    "\002\022\003\000\002\022\005\000\002\040\004\000\002" +
    "\040\004\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\023\005\000\002\026\005\000\002\026\004" +
    "\000\002\026\003\000\002\035\004\000\002\035\004\000" +
    "\002\035\004\000\002\035\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\024\022\000\002\024\006\000\002\036\004" +
    "\000\002\036\004\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\010\030\007\031\005\040\004\001\002\000" +
    "\004\023\027\001\002\000\014\006\013\007\011\010\014" +
    "\011\012\012\015\001\002\000\004\002\023\001\002\000" +
    "\014\006\013\007\011\010\014\011\012\012\015\001\002" +
    "\000\046\006\013\007\011\010\014\011\012\012\015\024" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\046\uffd8\001" +
    "\002\000\070\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\024" +
    "\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\046\uffa7\001\002\000\070\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\016\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\046\uffa8\001\002" +
    "\000\066\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\016\uffa5\020\uffa5\021\uffa5\024\uffa5\025\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\046\uffa5\001\002\000\066\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\016\uffa4\020\uffa4\021\uffa4" +
    "\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\046\uffa4\001\002\000\070\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\016\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\046\uffa6\001" +
    "\002\000\046\006\013\007\011\010\014\011\012\012\015" +
    "\024\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\046\uffd9" +
    "\001\002\000\010\030\007\031\005\040\004\001\002\000" +
    "\004\002\uffff\001\002\000\034\024\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\046\uffdb\001\002\000\034\024\uffda" +
    "\030\uffda\031\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\046\uffda\001\002" +
    "\000\004\002\001\001\002\000\004\032\025\001\002\000" +
    "\010\030\007\031\005\040\004\001\002\000\004\002\ufffe" +
    "\001\002\000\012\030\034\031\032\034\031\037\033\001" +
    "\002\000\004\002\000\001\002\000\004\014\u0103\001\002" +
    "\000\014\006\013\007\011\010\014\011\012\012\015\001" +
    "\002\000\004\023\041\001\002\000\014\006\013\007\011" +
    "\010\014\011\012\012\015\001\002\000\004\002\uffdc\001" +
    "\002\000\010\030\034\031\032\037\033\001\002\000\004" +
    "\002\ufffb\001\002\000\004\002\ufffc\001\002\000\014\024" +
    "\046\030\047\031\044\035\042\036\043\001\002\000\014" +
    "\006\013\007\011\010\014\011\012\012\015\001\002\000" +
    "\014\006\013\007\011\010\014\011\012\012\015\001\002" +
    "\000\014\006\013\007\011\010\014\011\012\012\015\001" +
    "\002\000\004\002\ufff9\001\002\000\020\024\054\030\060" +
    "\031\062\034\056\041\055\042\057\043\063\001\002\000" +
    "\014\006\013\007\011\010\014\011\012\012\015\001\002" +
    "\000\014\024\046\030\047\031\044\035\042\036\043\001" +
    "\002\000\004\002\uffeb\001\002\000\004\002\ufff3\001\002" +
    "\000\004\002\uffe9\001\002\000\004\002\ufffd\001\002\000" +
    "\004\023\266\001\002\000\004\014\236\001\002\000\004" +
    "\023\127\001\002\000\014\006\013\007\011\010\014\011" +
    "\012\012\015\001\002\000\004\002\ufff5\001\002\000\014" +
    "\006\013\007\011\010\014\011\012\012\015\001\002\000" +
    "\004\023\065\001\002\000\004\002\uffef\001\002\000\012" +
    "\024\071\030\072\031\070\046\067\001\002\000\004\002" +
    "\ufff7\001\002\000\004\022\101\001\002\000\014\006\013" +
    "\007\011\010\014\011\012\012\015\001\002\000\020\024" +
    "\054\030\060\031\062\034\056\041\055\042\057\043\063" +
    "\001\002\000\014\006\013\007\011\010\014\011\012\012" +
    "\015\001\002\000\012\024\071\030\072\031\070\046\067" +
    "\001\002\000\004\002\uffd2\001\002\000\004\002\uffd0\001" +
    "\002\000\004\032\077\001\002\000\012\024\071\030\072" +
    "\031\070\046\067\001\002\000\004\002\uffd1\001\002\000" +
    "\016\006\013\007\011\010\014\011\012\012\015\013\102" +
    "\001\002\000\014\006\013\007\011\010\014\011\012\012" +
    "\015\001\002\000\004\021\111\001\002\000\004\021\uffca" +
    "\001\002\000\020\006\013\007\011\010\014\011\012\012" +
    "\015\013\uffc6\021\uffc6\001\002\000\020\006\013\007\011" +
    "\010\014\011\012\012\015\013\uffc7\021\uffc7\001\002\000" +
    "\006\013\uffc9\021\uffc9\001\002\000\006\013\uffc8\021\uffc8" +
    "\001\002\000\004\053\112\001\002\000\004\022\113\001" +
    "\002\000\016\006\013\007\011\010\014\011\012\012\015" +
    "\013\102\001\002\000\004\021\115\001\002\000\012\024" +
    "\071\030\072\031\070\046\067\001\002\000\004\002\uffd3" +
    "\001\002\000\004\013\120\001\002\000\004\021\uffcb\001" +
    "\002\000\004\032\122\001\002\000\020\024\054\030\060" +
    "\031\062\034\056\041\055\042\057\043\063\001\002\000" +
    "\004\002\ufff1\001\002\000\020\024\054\030\060\031\062" +
    "\034\056\041\055\042\057\043\063\001\002\000\004\002" +
    "\ufff2\001\002\000\004\002\uffee\001\002\000\012\024\132" +
    "\030\134\031\131\046\130\001\002\000\004\022\143\001" +
    "\002\000\014\006\013\007\011\010\014\011\012\012\015" +
    "\001\002\000\020\024\054\030\060\031\062\034\056\041" +
    "\055\042\057\043\063\001\002\000\004\002\ufff6\001\002" +
    "\000\014\006\013\007\011\010\014\011\012\012\015\001" +
    "\002\000\012\024\132\030\134\031\131\046\130\001\002" +
    "\000\004\002\uffce\001\002\000\004\002\uffcc\001\002\000" +
    "\004\032\141\001\002\000\012\024\132\030\134\031\131" +
    "\046\130\001\002\000\004\002\uffcd\001\002\000\016\006" +
    "\013\007\011\010\014\011\012\012\015\013\102\001\002" +
    "\000\004\021\145\001\002\000\004\051\146\001\002\000" +
    "\004\022\147\001\002\000\004\004\150\001\002\000\016" +
    "\006\013\007\011\010\014\011\012\012\015\013\151\001" +
    "\002\000\014\006\013\007\011\010\014\011\012\012\015" +
    "\001\002\000\006\005\uffc0\025\uffc0\001\002\000\006\005" +
    "\161\025\160\001\002\000\022\005\uffbc\006\013\007\011" +
    "\010\014\011\012\012\015\013\uffbc\025\uffbc\001\002\000" +
    "\022\005\uffbd\006\013\007\011\010\014\011\012\012\015" +
    "\013\uffbd\025\uffbd\001\002\000\010\005\uffbf\013\uffbf\025" +
    "\uffbf\001\002\000\010\005\uffbe\013\uffbe\025\uffbe\001\002" +
    "\000\016\006\013\007\011\010\014\011\012\012\015\013" +
    "\151\001\002\000\004\021\162\001\002\000\004\052\163" +
    "\001\002\000\004\022\164\001\002\000\004\004\165\001" +
    "\002\000\020\006\013\007\011\010\014\011\012\012\015" +
    "\013\166\033\174\001\002\000\016\006\013\007\011\010" +
    "\014\011\012\012\015\033\174\001\002\000\010\005\uffb1" +
    "\013\uffb1\025\uffb1\001\002\000\006\005\uffb7\025\uffb7\001" +
    "\002\000\006\005\225\025\224\001\002\000\024\005\uffb2" +
    "\006\013\007\011\010\014\011\012\012\015\013\uffb2\025" +
    "\uffb2\033\174\001\002\000\024\005\uffb3\006\013\007\011" +
    "\010\014\011\012\012\015\013\uffb3\025\uffb3\033\174\001" +
    "\002\000\004\023\175\001\002\000\006\044\176\045\177" +
    "\001\002\000\004\025\201\001\002\000\004\024\200\001" +
    "\002\000\012\005\uffa2\013\uffa2\021\uffa2\025\uffa2\001\002" +
    "\000\004\013\202\001\002\000\014\006\013\007\011\010" +
    "\014\011\012\012\015\001\002\000\016\006\013\007\011" +
    "\010\014\011\012\012\015\013\uff9e\001\002\000\004\013" +
    "\207\001\002\000\016\006\013\007\011\010\014\011\012" +
    "\012\015\013\uff9f\001\002\000\004\013\uffa1\001\002\000" +
    "\004\025\210\001\002\000\004\013\211\001\002\000\014" +
    "\006\013\007\011\010\014\011\012\012\015\001\002\000" +
    "\004\013\213\001\002\000\004\025\214\001\002\000\004" +
    "\013\215\001\002\000\014\006\013\007\011\010\014\011" +
    "\012\012\015\001\002\000\004\013\217\001\002\000\004" +
    "\024\220\001\002\000\012\005\uffa3\013\uffa3\021\uffa3\025" +
    "\uffa3\001\002\000\004\013\uffa0\001\002\000\010\005\uffb5" +
    "\013\uffb5\025\uffb5\001\002\000\010\005\uffb4\013\uffb4\025" +
    "\uffb4\001\002\000\020\006\013\007\011\010\014\011\012" +
    "\012\015\013\166\033\174\001\002\000\004\021\226\001" +
    "\002\000\012\024\132\030\134\031\131\046\130\001\002" +
    "\000\004\002\uffcf\001\002\000\006\005\uffb6\025\uffb6\001" +
    "\002\000\004\013\232\001\002\000\006\005\uffb8\025\uffb8" +
    "\001\002\000\006\005\uffc1\025\uffc1\001\002\000\004\013" +
    "\235\001\002\000\006\005\uffc2\025\uffc2\001\002\000\004" +
    "\013\240\001\002\000\004\025\260\001\002\000\004\017" +
    "\241\001\002\000\024\006\013\007\011\010\014\011\012" +
    "\012\015\013\242\020\245\022\244\027\243\001\002\000" +
    "\006\015\uffad\025\uffad\001\002\000\010\007\011\011\012" +
    "\012\015\001\002\000\020\006\013\007\011\010\014\011" +
    "\012\012\015\020\245\027\243\001\002\000\024\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\020\uffa9\022" +
    "\uffa9\027\uffa9\001\002\000\024\006\013\007\011\010\014" +
    "\011\012\012\015\013\242\020\245\022\244\027\243\001" +
    "\002\000\020\006\013\007\011\010\014\011\012\012\015" +
    "\020\245\027\243\001\002\000\006\015\uffb0\025\uffb0\001" +
    "\002\000\020\006\013\007\011\010\014\011\012\012\015" +
    "\020\245\027\243\001\002\000\024\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\020\uffac\022\uffac\027\uffac" +
    "\001\002\000\024\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\020\uffaa\022\uffaa\027\uffaa\001\002\000\006" +
    "\015\uffae\025\uffae\001\002\000\024\006\013\007\011\010" +
    "\014\011\012\012\015\013\242\020\245\022\244\027\243" +
    "\001\002\000\006\015\uffaf\025\uffaf\001\002\000\024\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\020\uffab" +
    "\022\uffab\027\uffab\001\002\000\004\013\240\001\002\000" +
    "\004\015\262\001\002\000\004\021\263\001\002\000\020" +
    "\024\054\030\060\031\062\034\056\041\055\042\057\043" +
    "\063\001\002\000\004\002\ufff4\001\002\000\004\002\ufff0" +
    "\001\002\000\012\024\272\030\273\031\271\046\270\001" +
    "\002\000\004\002\ufff8\001\002\000\004\022\302\001\002" +
    "\000\014\006\013\007\011\010\014\011\012\012\015\001" +
    "\002\000\020\024\054\030\060\031\062\034\056\041\055" +
    "\042\057\043\063\001\002\000\014\006\013\007\011\010" +
    "\014\011\012\012\015\001\002\000\012\024\272\030\273" +
    "\031\271\046\270\001\002\000\004\002\uffd6\001\002\000" +
    "\004\002\uffd4\001\002\000\004\032\300\001\002\000\012" +
    "\024\272\030\273\031\271\046\270\001\002\000\004\002" +
    "\uffd5\001\002\000\016\006\013\007\011\010\014\011\012" +
    "\012\015\013\102\001\002\000\004\021\304\001\002\000" +
    "\004\051\305\001\002\000\004\022\306\001\002\000\004" +
    "\004\307\001\002\000\016\006\013\007\011\010\014\011" +
    "\012\012\015\013\310\001\002\000\014\006\013\007\011" +
    "\010\014\011\012\012\015\001\002\000\006\005\313\025" +
    "\314\001\002\000\006\005\uffc3\025\uffc3\001\002\000\004" +
    "\021\316\001\002\000\016\006\013\007\011\010\014\011" +
    "\012\012\015\013\310\001\002\000\006\005\uffc4\025\uffc4" +
    "\001\002\000\004\052\317\001\002\000\004\022\320\001" +
    "\002\000\004\004\321\001\002\000\020\006\013\007\011" +
    "\010\014\011\012\012\015\013\322\033\174\001\002\000" +
    "\016\006\013\007\011\010\014\011\012\012\015\033\174" +
    "\001\002\000\006\005\326\025\325\001\002\000\006\005" +
    "\uffba\025\uffba\001\002\000\020\006\013\007\011\010\014" +
    "\011\012\012\015\013\322\033\174\001\002\000\004\021" +
    "\327\001\002\000\004\047\330\001\002\000\004\022\331" +
    "\001\002\000\016\006\013\007\011\010\014\011\012\012" +
    "\015\013\102\001\002\000\004\021\333\001\002\000\004" +
    "\050\334\001\002\000\004\022\335\001\002\000\016\006" +
    "\013\007\011\010\014\011\012\012\015\013\102\001\002" +
    "\000\004\021\337\001\002\000\012\024\272\030\273\031" +
    "\271\046\270\001\002\000\004\002\uffd7\001\002\000\006" +
    "\005\uffb9\025\uffb9\001\002\000\004\013\343\001\002\000" +
    "\006\005\uffbb\025\uffbb\001\002\000\004\013\345\001\002" +
    "\000\006\005\uffc5\025\uffc5\001\002\000\004\032\347\001" +
    "\002\000\014\024\046\030\047\031\044\035\042\036\043" +
    "\001\002\000\004\002\uffea\001\002\000\016\006\013\007" +
    "\011\010\014\011\012\012\015\016\uffe5\001\002\000\004" +
    "\016\355\001\002\000\016\006\013\007\011\010\014\011" +
    "\012\012\015\016\uffe6\001\002\000\004\016\uffe8\001\002" +
    "\000\010\006\013\010\014\033\174\001\002\000\012\006" +
    "\013\010\014\021\uffe0\033\174\001\002\000\004\021\361" +
    "\001\002\000\004\021\uffde\001\002\000\014\024\046\030" +
    "\047\031\044\035\042\036\043\001\002\000\004\002\uffec" +
    "\001\002\000\004\021\uffdf\001\002\000\004\016\uffe7\001" +
    "\002\000\004\016\366\001\002\000\004\013\367\001\002" +
    "\000\014\006\013\007\011\010\014\011\012\012\015\001" +
    "\002\000\016\006\013\007\011\010\014\011\012\012\015" +
    "\013\uffe1\001\002\000\016\006\013\007\011\010\014\011" +
    "\012\012\015\013\uffe2\001\002\000\004\013\373\001\002" +
    "\000\004\021\374\001\002\000\014\024\046\030\047\031" +
    "\044\035\042\036\043\001\002\000\004\002\uffed\001\002" +
    "\000\004\013\uffe4\001\002\000\004\013\uffe3\001\002\000" +
    "\004\032\u0101\001\002\000\010\030\034\031\032\037\033" +
    "\001\002\000\004\002\ufffa\001\002\000\004\013\240\001" +
    "\002\000\004\025\u0105\001\002\000\004\013\240\001\002" +
    "\000\004\015\u0107\001\002\000\004\021\u0108\001\002\000" +
    "\012\030\034\031\032\034\031\037\033\001\002\000\004" +
    "\002\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\004\010\005\001\001\000\002\001\001\000" +
    "\010\027\023\030\015\031\007\001\001\000\002\001\001" +
    "\000\010\027\016\030\015\031\007\001\001\000\010\027" +
    "\021\030\015\031\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\020\030\015\031\007\001\001\000\004" +
    "\010\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\025\001\001\000\002\001\001\000\006\002\034\015" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\377\030\015\031\007\001\001\000\004\003\037\001" +
    "\001\000\010\027\035\030\015\031\007\001\001\000\002" +
    "\001\001\000\004\002\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\044\001\001\000\010\030\352" +
    "\031\350\042\364\001\001\000\010\030\352\031\350\042" +
    "\351\001\001\000\010\027\345\030\015\031\007\001\001" +
    "\000\002\001\001\000\010\007\052\011\060\032\051\001" +
    "\001\000\010\027\047\030\015\031\007\001\001\000\004" +
    "\025\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\264\001\001" +
    "\000\002\001\001\000\004\006\125\001\001\000\010\027" +
    "\123\030\015\031\007\001\001\000\002\001\001\000\010" +
    "\027\120\030\015\031\007\001\001\000\004\005\063\001" +
    "\001\000\002\001\001\000\004\013\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\075\030\015\031" +
    "\007\001\001\000\010\007\074\011\060\032\051\001\001" +
    "\000\010\027\072\030\015\031\007\001\001\000\004\013" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\077\001\001\000\002\001\001\000" +
    "\012\016\102\030\105\031\104\043\103\001\001\000\010" +
    "\030\105\031\104\043\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\105\031\104\043\107\001\001" +
    "\000\010\030\105\031\104\043\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\113\030\105\031\104\043\103\001\001\000" +
    "\002\001\001\000\004\013\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\122\011\060\032\051\001\001\000\002\001\001" +
    "\000\010\007\124\011\060\032\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\132\001\001\000\002" +
    "\001\001\000\010\027\137\030\015\031\007\001\001\000" +
    "\010\007\136\011\060\032\051\001\001\000\002\001\001" +
    "\000\010\027\134\030\015\031\007\001\001\000\004\014" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\141\001\001\000\002\001\001\000" +
    "\012\016\143\030\105\031\104\043\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\152\030\154\031\153\037\151\001\001" +
    "\000\010\030\154\031\153\037\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\154\031\153\037\156" +
    "\001\001\000\010\030\154\031\153\037\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\232\030\154" +
    "\031\153\037\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\022\170" +
    "\024\166\030\172\031\171\040\167\001\001\000\012\024" +
    "\166\030\172\031\171\040\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\166\030" +
    "\172\031\171\040\222\001\001\000\012\024\166\030\172" +
    "\031\171\040\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\204\031\202\036\203\001" +
    "\001\000\010\030\204\031\202\036\220\001\001\000\002" +
    "\001\001\000\010\030\204\031\202\036\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\204\031\202\036\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\204\031\202" +
    "\036\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\227\024\166\030\172\031\171\040" +
    "\167\001\001\000\002\001\001\000\004\014\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\247\030\250\031\246\035\245" +
    "\001\001\000\002\001\001\000\004\030\256\001\001\000" +
    "\010\030\250\031\246\035\254\001\001\000\002\001\001" +
    "\000\012\026\253\030\250\031\246\035\245\001\001\000" +
    "\010\030\250\031\246\035\252\001\001\000\002\001\001" +
    "\000\010\030\250\031\246\035\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\255" +
    "\030\250\031\246\035\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\263\011\060\032\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\276\030\015\031\007\001\001\000\010\007\275\011\060" +
    "\032\051\001\001\000\010\027\273\030\015\031\007\001" +
    "\001\000\004\012\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\300\001\001\000" +
    "\002\001\001\000\012\016\302\030\105\031\104\043\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\310\030\154\031\153" +
    "\037\311\001\001\000\010\030\154\031\153\037\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\314\030\154\031\153\037\311\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\021\322\024\166\030\172\031\171\040" +
    "\323\001\001\000\012\024\166\030\172\031\171\040\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\340\024\166\030\172\031\171\040\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\331\030\105\031\104\043\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\335\030" +
    "\105\031\104\043\103\001\001\000\002\001\001\000\004" +
    "\012\337\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\347\001\001\000" +
    "\002\001\001\000\010\030\352\031\350\042\363\001\001" +
    "\000\002\001\001\000\010\030\352\031\350\042\353\001" +
    "\001\000\002\001\001\000\010\024\357\031\355\034\356" +
    "\001\001\000\010\024\357\031\355\034\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\370\031\367" +
    "\033\371\001\001\000\010\030\370\031\367\033\376\001" +
    "\001\000\010\030\370\031\367\033\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\u0101\001\001\000\002\001\001\000" +
    "\004\023\u0103\001\001\000\002\001\001\000\004\023\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\034\015\u0108\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser3$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser3$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser3$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Erroe Sintactico en la linea "+s.left+" Columna "+s.right+". No se esperaba este componente: "+s.value+".");
    }

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sÃ­ntactico irrecuperable en la LÃ­nea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    } 

    



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser3$actions {
  private final parser3 parser;

  /** Constructor */
  CUP$parser3$actions(parser3 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser3$do_action_part00000000(
    int                        CUP$parser3$act_num,
    java_cup.runtime.lr_parser CUP$parser3$parser,
    java.util.Stack            CUP$parser3$stack,
    int                        CUP$parser3$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser3$result;

      /* select the action based on the action number */
      switch (CUP$parser3$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= InicioPrimero EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = start_val;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser3$parser.done_parsing();
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // InicioPrimero ::= GENERARREPORTEESTADISTICO LLAVE1 PalabraReservadaInstruccion 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("InicioPrimero",6, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // InicioPrimero ::= COMENTARIOS Comentario InicioPrimero 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("InicioPrimero",6, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InicioPrimero ::= COMENINICIAL Comentario COMENFINAL InicioPrimero 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("InicioPrimero",6, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Terminacion ::= LLAVE2 
            {
              Object RESULT =null;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Terminacion",24, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inicio ::= DEFINIRGLOBALES LlavesAp 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inicio ::= COMENTARIOS Comentario Inicio 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inicio ::= COMENINICIAL Comentario COMENFINAL Inicio 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LlavesAp ::= LLAVE1 PalabraReservada 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesAp",1, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LlavesGraB ::= LLAVE1 PalabraReservadaGraficaB 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesGraB",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LlavesGraL ::= LLAVE1 PalabraReservadaGraficaL 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesGraL",3, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LlavesGraP ::= LLAVE1 PalabraReservadaGraficaP 
            {
              Object RESULT =null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesGraP",4, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LlavesFN ::= PalabraInicial 
            {
              Object RESULT =null;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesFN",5, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LlavesFN ::= COMPARE PAR1 Direccion COMA Direccion PAR2 PUNTOYCOMA LlavesFN 
            {
              Object RESULT =null;
		int dic1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-5)).left;
		int dic1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-5)).right;
		Object dic1 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-5)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesFN",5, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-7)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LlavesFN ::= Terminacion 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int terright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesFN",5, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LlavesFN ::= COMENTARIOS Comentario LlavesFN 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesFN",5, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LlavesFN ::= COMENINICIAL Comentario COMENFINAL LlavesFN 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("LlavesFN",5, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PalabraInicial ::= GRAFICABARRAS LlavesGraB 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraInicial",7, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PalabraInicial ::= GRAFICALINEAS LlavesGraL 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraInicial",7, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PalabraInicial ::= GRAFICAPIE LlavesGraP 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int encright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraInicial",7, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PalabraReservada ::= STRING Varcaracter IGUAL CADENAS CaracterS CADENAS PUNTOYCOMA PalabraReservada 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		Elemento element = new Elemento(str.toString(), car.toString());
                                                                                                                        Interfaz_Grafica.datos.add(element);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservada",19, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-7)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PalabraReservada ::= DOUBLE Varcaracter IGUAL CaracterD PUNTOYCOMA PalabraReservada 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-4)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-4)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-4)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		Elemento element = new Elemento(str.toString(), car.toString());
                                                                                                                        Interfaz_Grafica.datos.add(element);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservada",19, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-5)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PalabraReservada ::= COMENTARIOS Comentario PalabraReservada 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservada",19, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PalabraReservada ::= COMENINICIAL Comentario COMENFINAL PalabraReservada 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservada",19, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PalabraReservada ::= LLAVE2 LlavesFN 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservada",19, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Varcaracter ::= Alfabeto Varcaracter 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = str + var.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter",32, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Varcaracter ::= Numero Varcaracter 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + var.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter",32, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Varcaracter ::= Alfabeto 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = str;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter",32, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Varcaracter ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter",32, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CaracterS ::= Alfabeto CaracterS 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		 RESULT = alf + car.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterS",25, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CaracterS ::= Numero CaracterS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + car.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterS",25, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CaracterS ::= Alfabeto 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = str;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterS",25, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CaracterS ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterS",25, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CaracterD ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterD",26, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CaracterD ::= Numero CaracterD 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + car.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterD",26, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CaracterD ::= Buscador 
            {
              Object RESULT =null;
		int busleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int busright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object bus = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = bus;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterD",26, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PalabraReservadaInstruccion ::= COMPARE PAR1 Direccion COMA Direccion PAR2 PUNTOYCOMA PalabraReservadaInstruccion 
            {
              Object RESULT =null;
		int dic1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-5)).left;
		int dic1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-5)).right;
		Object dic1 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-5)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int pileft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int piright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object pi = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaInstruccion",11, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-7)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PalabraReservadaInstruccion ::= Inicio 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaInstruccion",11, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Comentario ::= Alfabeto Comentario 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Comentario",21, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Comentario ::= Numero Comentario 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Comentario",21, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Comentario ::= Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Comentario",21, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Comentario ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Comentario",21, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PalabraReservadaGraficaB ::= TITULO DOSPUNTOS TituloGrafica PUNTOYCOMA EJEX DOSPUNTOS CORCHETE1 EjeVariableXB CORCHETE2 PUNTOYCOMA VALORES DOSPUNTOS CORCHETE1 ValorB CORCHETE2 PUNTOYCOMA TITULOX DOSPUNTOS TituloGrafica PUNTOYCOMA TITULOY DOSPUNTOS TituloGrafica PUNTOYCOMA PalabraReservadaGraficaB 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-22)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-22)).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-22)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-17)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-17)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-17)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-11)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-11)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		Barras bar = new Barras(tit.toString(), Interfaz_Grafica.BarraTitulo, Interfaz_Grafica.BarraValor, tx.toString(), ty.toString());
                                                                                                            Interfaz_Grafica.barra.add(bar);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaB",8, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-24)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PalabraReservadaGraficaB ::= COMENTARIOS Comentario PalabraReservadaGraficaB 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaB",8, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PalabraReservadaGraficaB ::= COMENINICIAL Comentario COMENFINAL PalabraReservadaGraficaB 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaB",8, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PalabraReservadaGraficaB ::= LLAVE2 LlavesFN 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaB",8, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PalabraReservadaGraficaL ::= TITULO DOSPUNTOS TituloGrafica PUNTOYCOMA ARCHIVO DOSPUNTOS TituloGrafica PUNTOYCOMA PalabraReservadaGraficaL 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int archleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int archright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object arch = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		Lineas lin = new Lineas(tit.toString(), arch.toString());
                                                                                                                    Interfaz_Grafica.linea.add(lin);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaL",9, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-8)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PalabraReservadaGraficaL ::= COMENTARIOS Comentario PalabraReservadaGraficaL 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaL",9, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PalabraReservadaGraficaL ::= COMENINICIAL Comentario COMENFINAL PalabraReservadaGraficaL 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaL",9, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PalabraReservadaGraficaL ::= LLAVE2 LlavesFN 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaL",9, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PalabraReservadaGraficaP ::= TITULO DOSPUNTOS TituloGrafica PUNTOYCOMA EJEX DOSPUNTOS CORCHETE1 EjeVariableXP CORCHETE2 PUNTOYCOMA VALORES DOSPUNTOS CORCHETE1 ValorP CORCHETE2 PUNTOYCOMA PalabraReservadaGraficaP 
            {
              Object RESULT =null;
		int titleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-14)).left;
		int titright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-14)).right;
		Object tit = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-14)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-9)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-9)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-9)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-3)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		Pastel dulce = new Pastel(tit.toString(), Interfaz_Grafica.PieTitulo, Interfaz_Grafica.PieValor);
                                                                                                                                 Interfaz_Grafica.pie.add(dulce);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaP",10, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-16)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PalabraReservadaGraficaP ::= COMENTARIOS Comentario PalabraReservadaGraficaP 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaP",10, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PalabraReservadaGraficaP ::= COMENINICIAL Comentario COMENFINAL PalabraReservadaGraficaP 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int inicleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int inicright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object inic = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaP",10, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PalabraReservadaGraficaP ::= LLAVE2 LlavesFN 
            {
              Object RESULT =null;
		int finleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int finright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object fin = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("PalabraReservadaGraficaP",10, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TituloGrafica ::= CADENAS Varcaracter2 CADENAS 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = var;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("TituloGrafica",12, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TituloGrafica ::= Varcaracter2 
            {
              Object RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		  int z = 0;
                                                 int r = 0;
                                                 for(int i= 0; i < Interfaz_Grafica.datos.size(); i++){
                                                    if(res == Interfaz_Grafica.datos.get(i).getIdentificador()){
                                                              z = 1;
                                                              r = i;
                                                              i = 1000000;
        
                                                      }
                                                   }

                                               if(z == 1){
                                                     RESULT = Interfaz_Grafica.datos.get(r).getValor();

                                                   }else{
                                                      RESULT = "Dato no encontrado; Entrada Default";
                                                   }

                                                  z = 0; 
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("TituloGrafica",12, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Varcaracter2 ::= Alfabeto Varcaracter2 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = alf + com.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter2",33, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Varcaracter2 ::= Numero Varcaracter2 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + com.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter2",33, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Varcaracter2 ::= Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = alf;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter2",33, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Varcaracter2 ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Varcaracter2",33, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EjeVariableXB ::= CADENAS CaracterX CADENAS 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = car;
                                                         Titulo nom = new Titulo(RESULT.toString());
                                                         Interfaz_Grafica.BarraTitulo.add(nom);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("EjeVariableXB",13, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EjeVariableXB ::= EjeVariableXB COMA EjeVariableXB 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = vg.toString() + c + ex.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("EjeVariableXB",13, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EjeVariableXB ::= CaracterX 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		int z = 0;
                                                 int r = 0;
                                                 for(int i= 0; i < Interfaz_Grafica.datos.size(); i++){
                                                    if(car == Interfaz_Grafica.datos.get(i).getIdentificador()){
                                                              z = 1;
                                                              r = i;
                                                              i = 1000000;
        
                                                      }
                                                   }

                                               if(z == 1){
                                                     RESULT = Interfaz_Grafica.datos.get(r).getValor();
                                                     Titulo nom = new Titulo(RESULT.toString());
                                                     Interfaz_Grafica.BarraTitulo.add(nom);

                                                   }else{
                                                      RESULT = "Dato no encontrado; Entrada Default";
                                                      Titulo nom = new Titulo(RESULT.toString());
                                                      Interfaz_Grafica.BarraTitulo.add(nom);
                                                   }

                                                  z = 0;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("EjeVariableXB",13, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EjeVariableXP ::= CADENAS CaracterX CADENAS 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = car;
                                                         Titulo nom = new Titulo(RESULT.toString());
                                                         Interfaz_Grafica.PieTitulo.add(nom);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("EjeVariableXP",14, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EjeVariableXP ::= EjeVariableXP COMA EjeVariableXP 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = vg.toString() + c + ex.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("EjeVariableXP",14, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EjeVariableXP ::= CaracterX 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		int z = 0;
                                                 int r = 0;
                                                 for(int i= 0; i < Interfaz_Grafica.datos.size(); i++){
                                                    if(car == Interfaz_Grafica.datos.get(i).getIdentificador()){
                                                              z = 1;
                                                              r = i;
                                                              i = 1000000;
        
                                                      }
                                                   }

                                               if(z == 1){
                                                     RESULT = Interfaz_Grafica.datos.get(r).getValor();
                                                     Titulo nom = new Titulo(RESULT.toString());
                                                     Interfaz_Grafica.PieTitulo.add(nom);

                                                   }else{
                                                      RESULT = "Dato no encontrado; Entrada Default";
                                                      Titulo nom = new Titulo(RESULT.toString());
                                                      Interfaz_Grafica.PieTitulo.add(nom);
                                                   }

                                                  z = 0;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("EjeVariableXP",14, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CaracterX ::= Alfabeto CaracterX 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = str + ex.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterX",29, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CaracterX ::= Numero CaracterX 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + es.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterX",29, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CaracterX ::= Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = alf;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterX",29, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CaracterX ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterX",29, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ValorB ::= CADENAS CaracterV CADENAS 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = car;
                                                         Valor nom = new Valor(RESULT.toString());
                                                         Interfaz_Grafica.BarraValor.add(nom);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("ValorB",15, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ValorB ::= CaracterV 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		int z = 0;
                                                 int r = 0;
                                                 for(int i= 0; i < Interfaz_Grafica.datos.size(); i++){
                                                    if(car == Interfaz_Grafica.datos.get(i).getIdentificador()){
                                                              z = 1;
                                                              r = i;
                                                              i = 1000000;
        
                                                      }
                                                   }

                                               if(z == 1){
                                                     RESULT = Interfaz_Grafica.datos.get(r).getValor();
                                                     Valor nom = new Valor(RESULT.toString());
                                                     Interfaz_Grafica.BarraValor.add(nom);

                                                   }else{
                                                      RESULT = "Dato no encontrado; Entrada Default";
                                                      Valor nom = new Valor(RESULT.toString());
                                                      Interfaz_Grafica.BarraValor.add(nom);
                                                   }

                                                  z = 0;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("ValorB",15, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ValorB ::= ValorB COMA ValorB 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = vg.toString() + c + ex.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("ValorB",15, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ValorP ::= CADENAS CaracterV CADENAS 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = car;
                                                         Valor nom = new Valor(RESULT.toString());
                                                         Interfaz_Grafica.PieValor.add(nom);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("ValorP",16, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ValorP ::= CaracterV 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		int z = 0;
                                                 int r = 0;
                                                 for(int i= 0; i < Interfaz_Grafica.datos.size(); i++){
                                                    if(car == Interfaz_Grafica.datos.get(i).getIdentificador()){
                                                              z = 1;
                                                              r = i;
                                                              i = 1000000;
        
                                                      }
                                                   }

                                               if(z == 1){
                                                     RESULT = Interfaz_Grafica.datos.get(r).getValor();
                                                     Valor nom = new Valor(RESULT.toString());
                                                     Interfaz_Grafica.PieValor.add(nom);

                                                   }else{
                                                      RESULT = "Dato no encontrado; Entrada Default";
                                                      Valor nom = new Valor(RESULT.toString());
                                                      Interfaz_Grafica.PieValor.add(nom);
                                                   }

                                                  z = 0;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("ValorP",16, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ValorP ::= ValorP COMA ValorP 
            {
              Object RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object vg = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = vg.toString() + c + ex.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("ValorP",16, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CaracterV ::= Alfabeto CaracterV 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = str + ex.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterV",30, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CaracterV ::= Numero CaracterV 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + es.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterV",30, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CaracterV ::= Alfabeto 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = str;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterV",30, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CaracterV ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterV",30, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CaracterV ::= Buscador 
            {
              Object RESULT =null;
		int busleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int busright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object bus = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = bus;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterV",30, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Direccion ::= CADENAS CDM Direccion2 
            {
              Object RESULT =null;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Direccion",17, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Direccion2 ::= DOSPUNTOS CaracterCDM Direccion2 
            {
              Object RESULT =null;
		int car1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int car1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object car1 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Direccion2",20, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Direccion2 ::= CaracterCDM Direccion2 
            {
              Object RESULT =null;
		int car1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int car1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object car1 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int dic2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int dic2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object dic2 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Direccion2",20, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Direccion2 ::= CADENAS 
            {
              Object RESULT =null;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Direccion2",20, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CaracterCDM ::= Alfabeto CaracterCDM 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterCDM",27, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CaracterCDM ::= PUNTO Alfabeto 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterCDM",27, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CaracterCDM ::= Numero CaracterCDM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterCDM",27, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CaracterCDM ::= DIVIDIDO 
            {
              Object RESULT =null;
		
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterCDM",27, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Alfabeto ::= LETRAS 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String let = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = new String(let);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Alfabeto",22, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Alfabeto ::= OTROENTERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = new Double(ent);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Alfabeto",22, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Alfabeto ::= COMBINACION 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = new String(com);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Alfabeto",22, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Numero ::= ENTEROS 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = new Double(ent);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Numero",23, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Numero ::= DECIMALES 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = new Double(dec);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Numero",23, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Buscador ::= MONEDA LLAVE1 PUNTAJEESPECIFICO COMA CADENAS CaracterB CADENAS COMA CADENAS CaracterB CADENAS COMA CADENAS CaracterB CADENAS LLAVE2 
            {
              Object RESULT =null;
		int car1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-10)).left;
		int car1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-10)).right;
		Object car1 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-10)).value;
		int car2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).left;
		int car2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-6)).right;
		Object car2 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-6)).value;
		int car3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int car3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Object car3 = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		

if(car2 == "clase"){ 
int z = 0;
int r = 0;
for(int i= 0; i < Interfaz_Grafica.puntaje.size(); i++){
  if(car3 == Interfaz_Grafica.puntaje.get(i).getIdentificador()){
        z = 1;
        r = i;
        i = 1000000;
        
  }
}

if(z == 1){
   RESULT = Interfaz_Grafica.puntaje.get(r).getValor();

}else{
   RESULT = "0.0";
}

z = 0; 

}else if(car2 == "metodo"){
int z = 0;
int r = 0;
for(int i= 0; i < Interfaz_Grafica.puntaje.size(); i++){
  if(car3 == Interfaz_Grafica.puntaje.get(i).getIdentificador()){
        z = 1;
        r = i;
        i = 1000000;
        
  }
}

if(z == 1){
   RESULT = Interfaz_Grafica.puntaje.get(r).getValor();

}else{
   RESULT = "0.0";
}

z = 0;

}else if(car2 == "variable"){
int z = 0;
int r = 0;
for(int i= 0; i < Interfaz_Grafica.puntaje.size(); i++){
  if(car3 == Interfaz_Grafica.puntaje.get(i).getIdentificador()){
        z = 1;
        r = i;
        i = 1000000;
        
  }
}

if(z == 1){
   RESULT = Interfaz_Grafica.puntaje.get(r).getValor();

}else{
   RESULT = "0.0";
}

z = 0;
}else if(car2 == "comentario"){
int z = 0;
int r = 0;
for(int i= 0; i < Interfaz_Grafica.puntaje.size(); i++){
  if(car3 == Interfaz_Grafica.puntaje.get(i).getIdentificador()){
        z = 1;
        r = i;
        i = 1000000;
        
  }
}

if(z == 1){
   RESULT = Interfaz_Grafica.puntaje.get(r).getValor();

}else{
   RESULT = "0.0";
}

z = 0;
}else{
System.out.println("Elemento no reconocido");}



              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Buscador",18, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-15)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Buscador ::= MONEDA LLAVE1 PUNTAJEGENERAL LLAVE2 
            {
              Object RESULT =null;
		RESULT = Interfaz_Grafica.PGeneral.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("Buscador",18, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-3)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CaracterB ::= Alfabeto CaracterB 
            {
              Object RESULT =null;
		int alfleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int alfright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object alf = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = alf + car.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterB",28, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CaracterB ::= Numero CaracterB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object car = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num + car.toString();
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterB",28, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CaracterB ::= Alfabeto 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = cad;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterB",28, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CaracterB ::= Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = num;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("CaracterB",28, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser3$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser3$do_action(
    int                        CUP$parser3$act_num,
    java_cup.runtime.lr_parser CUP$parser3$parser,
    java.util.Stack            CUP$parser3$stack,
    int                        CUP$parser3$top)
    throws java.lang.Exception
    {
              return CUP$parser3$do_action_part00000000(
                               CUP$parser3$act_num,
                               CUP$parser3$parser,
                               CUP$parser3$stack,
                               CUP$parser3$top);
    }
}

}
